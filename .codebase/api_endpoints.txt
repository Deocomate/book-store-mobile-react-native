openapi: "3.1.0"
info:
  title: "microservice API"
  description: "microservice API"
  version: "1.0.0"
servers:
  - url: "https://microservice"
paths:
  /notification/firebase:
    post:
      summary: "POST notification/firebase"
      operationId: "sendNotification"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/ResponseEntity"
  /notification/my-notification:
    delete:
      summary: "DELETE notification/my-notification"
      operationId: "deleteAllNotifications"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /notification/my-notification/mark-all-as-read:
    patch:
      summary: "PATCH notification/my-notification/mark-all-as-read"
      operationId: "markAllNotificationsAsRead"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /notification/my-notification/mark-as-read/{id}:
    patch:
      summary: "PATCH notification/my-notification/mark-as-read/{id}"
      operationId: "markNotificationAsRead"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/NotificationResponseToUser"
  /notification/my-notification/{id}:
    delete:
      summary: "DELETE notification/my-notification/{id}"
      operationId: "deleteNotification"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /notification/email:
    post:
      summary: "POST notification/email"
      operationId: "sendEmail"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmailResponse"
  /notification/fcm-token:
    post:
      summary: "POST notification/fcm-token"
      operationId: "fcmTokenResponse"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FcmTokenCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FcmTokenResponse"
components:
  schemas:
    NotificationRequest:
      type: "object"
      properties:
        userId:
          type: "integer"
          format: "int32"
        isRead:
          type: "boolean"
        title:
          type: "string"
        body:
          type: "string"
        topic:
          type: "string"
        token:
          type: "string"
        tokens:
          type: "array"
          items:
            type: "string"
        data:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
    HttpHeaders:
      type: "object"
      properties: { }
    ResponseEntity:
      type: "object"
      properties:
        headers:
          $ref: "#/components/schemas/HttpHeaders"
      required:
        - "headers"
    NotificationResponseToUser:
      type: "object"
      properties:
        id:
          type: "string"
        userId:
          type: "integer"
          format: "int32"
        isRead:
          type: "boolean"
        title:
          type: "string"
        body:
          type: "string"
        topic:
          type: "string"
        data:
          type: "string"
        createdAt:
          type: "string"
          format: "date-time"
    Recipient:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
    SendEmailRequest:
      type: "object"
      properties:
        to:
          $ref: "#/components/schemas/Recipient"
        subject:
          type: "string"
        htmlContent:
          type: "string"
    EmailResponse:
      type: "object"
      properties:
        messageId:
          type: "string"
    FcmTokenCreateRequest:
      type: "object"
      properties:
        token:
          type: "string"
    FcmTokenResponse:
      type: "object"
      properties:
        id:
          type: "string"
        token:
          type: "string"
        userId:
          type: "integer"
          format: "int32"