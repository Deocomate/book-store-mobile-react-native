openapi: "3.1.0"
info:
  title: "microservice API"
  description: "microservice API"
  version: "1.0.0"
servers:
  - url: "https://microservice"
paths:
  /auth/introspect:
    post:
      summary: "POST /auth/introspect"
      responses:
        "200":
          description: "OK"
  /blog/file/media:
    post:
      summary: "POST blog/file/media"
      responses:
        "200":
          description: "OK"
  /blog/file/media/{fileName}:
    delete:
      summary: "DELETE blog/file/media/{fileName}"
      parameters:
        - name: "fileName"
          in: "path"
          required: false
      responses:
        "200":
          description: "OK"
  /blog/{id}:
    delete:
      summary: "DELETE blog/{id}"
      operationId: "deleteBlog"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Void"
  /blog/category:
    get:
      summary: "GET blog/category"
      operationId: "getAllCategories"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/CategoryResponse"
  /cart/internal/users:
    post:
      summary: "POST cart/internal/users"
      operationId: "createCart"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CartResponse"
  /cart/cart-products:
    delete:
      summary: "DELETE cart/cart-products"
      operationId: "removeProductFromCart"
      requestBody:
        content:
          application/json:
            schema:
              type: "array"
              items:
                type: "integer"
                format: "int32"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /category/seeding/{numberOfRecords}:
    post:
      summary: "POST category/seeding/{numberOfRecords}"
      operationId: "seeding"
      parameters:
        - name: "numberOfRecords"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /category/{id}:
    delete:
      summary: "DELETE category/{id}"
      operationId: "deleteCategory"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Void"
  /customer/seeding/{numberOfRecords}:
    post:
      summary: "POST customer/seeding/{numberOfRecords}"
      operationId: "seeding"
      parameters:
        - name: "numberOfRecords"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /customer/{id}:
    delete:
      summary: "DELETE customer/{id}"
      operationId: "deleteContact"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Void"
  /file/media:
    post:
      summary: "POST file/media"
      operationId: "uploadFile"
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "file"
              properties:
                file:
                  type: "string"
                  format: "binary"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/FileResponse"
  /file/media/download/{fileName}:
    get:
      summary: "GET file/media/download/{fileName}"
      operationId: "downloadFile"
      parameters:
        - name: "fileName"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Resource"
  /file/media/{fileName}:
    delete:
      summary: "DELETE file/media/{fileName}"
      operationId: "deleteFile"
      parameters:
        - name: "fileName"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
  /identity/cart/internal/users:
    post:
      summary: "POST identity/cart/internal/users"
      responses:
        "200":
          description: "OK"
  /identity/file/media:
    post:
      summary: "POST identity/file/media"
      responses:
        "200":
          description: "OK"
  /identity/permissions:
    post:
      summary: "POST identity/permissions"
      operationId: "createPermission"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionCreationRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PermissionResponse"
  /identity/permissions/{name}:
    delete:
      summary: "DELETE identity/permissions/{name}"
      operationId: "deletePermission"
      parameters:
        - name: "name"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PermissionResponse"
  /identity/users:
    get:
      summary: "GET identity/users"
      operationId: "getAllUsers"
      parameters:
        - name: "pageIndex"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "1"
        - name: "pageSize"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /identity/users/info:
    put:
      summary: "PUT identity/users/info"
      operationId: "updateUserInfo"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateInfoRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /identity/users/profile-image:
    put:
      summary: "PUT identity/users/profile-image"
      operationId: "updateUserProfileImage"
      parameters:
        - name: "profileImage"
          in: "query"
          required: true
          schema:
            type: "string"
            format: "binary"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /identity/users/register:
    post:
      summary: "POST identity/users/register"
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /identity/users/seeding/{numberOfRecords}:
    post:
      summary: "POST identity/users/seeding/{numberOfRecords}"
      operationId: "seeding"
      parameters:
        - name: "numberOfRecords"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int32"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /identity/users/{userId}:
    put:
      summary: "PUT identity/users/{userId}"
      operationId: "updateUser"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
components:
  schemas:
    BlogResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        title:
          type: "string"
        thumbnail:
          type: "string"
        content:
          type: "string"
        priority:
          type: "integer"
          format: "int32"
        categoryId:
          type: "integer"
          format: "int64"
        slug:
          type: "string"
        createdAt:
          type: "string"
    BlogRequest:
      type: "object"
      properties:
        title:
          type: "string"
        content:
          type: "string"
        priority:
          type: "integer"
          format: "int32"
        categoryId:
          type: "integer"
          format: "int64"
    Void:
      type: "object"
      properties: { }
    CategoryResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        priority:
          type: "integer"
          format: "int64"
        slug:
          type: "string"
        type:
          type: "string"
        parentId:
          type: "integer"
          format: "int64"
        children:
          type: "array"
          items:
            $ref: "#/components/schemas/CategoryResponse"
    CartCreateRequest:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        userId:
          type: "integer"
          format: "int32"
    CartProduct:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        cartId:
          type: "integer"
          format: "int32"
        productId:
          type: "integer"
          format: "int32"
        quantity:
          type: "integer"
          format: "int32"
        createdAt:
          type: "string"
          format: "date-time"
        updatedAt:
          type: "string"
          format: "date-time"
    CartResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        userId:
          type: "integer"
          format: "int32"
        cartProducts:
          type: "array"
          items:
            $ref: "#/components/schemas/CartProduct"
    CartProductRequest:
      type: "object"
      properties:
        productId:
          type: "integer"
          format: "int32"
        quantity:
          type: "integer"
          format: "int32"
    CartProductResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        cartId:
          type: "integer"
          format: "int32"
        productId:
          type: "integer"
          format: "int32"
        quantity:
          type: "integer"
          format: "int32"
    CategoryTreeResponse:
      type: "object"
      properties:
        parent:
          $ref: "#/components/schemas/CategoryResponse"
        children:
          type: "array"
          items:
            $ref: "#/components/schemas/CategoryResponse"
    CategoryRequest:
      type: "object"
      properties:
        name:
          type: "string"
        priority:
          type: "integer"
          format: "int32"
        parentId:
          type: "integer"
          format: "int64"
        type:
          type: "string"
          enum:
            - "PRODUCT"
            - "BLOG"
            - "SERVICE"
    CustomerCareResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        phone:
          type: "string"
        email:
          type: "string"
        address:
          type: "string"
        content:
          type: "string"
        createdAt:
          type: "string"
    FileResponse:
      type: "object"
      properties:
        originalFileName:
          type: "string"
        url:
          type: "string"
    Resource:
      type: "object"
      properties: { }
    PermissionResponse:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
    PermissionCreationRequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
    RoleResponse:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        permissions:
          type: "array"
          items:
            $ref: "#/components/schemas/PermissionResponse"
    UserResponse:
      type: "object"
      properties:
        id:
          type: "string"
        username:
          type: "string"
        email:
          type: "string"
        profileImage:
          type: "string"
        roles:
          type: "array"
          items:
            $ref: "#/components/schemas/RoleResponse"
    UserUpdateInfoRequest:
      type: "object"
      properties:
        email:
          type: "string"
    UserCreateRequest:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
        email:
          type: "string"
        roles:
          type: "array"
          items:
            type: "string"
    UserUpdateRequest:
      type: "object"
      properties:
        password:
          type: "string"
        email:
          type: "string"
        roles:
          type: "array"
          items:
            type: "string"