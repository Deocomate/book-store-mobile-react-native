/* ==========================================================
   CODEBASE SNAPSHOT - 2025-06-02 14:12:44
   Project: book_store_mobile
   Files: 61 (60 text, 1 binary)
   Ignored Items: 714
   ========================================================== */

/* PROJECT STRUCTURE
   ------------------------------------------------------------
   .
   ├── .api/
   │   ├── api_endpoints.txt
   │   ├── axios_response_example.txt
   │   └── codebase_backend_api.txt
   ├── .expo/
   │   ├── types/
   │   ├── web/
   │   ├── devices.json
   │   └── README.md
   ├── .git/
   │   ├── hooks/
   │   ├── info/
   │   ├── logs/
   │   ├── objects/
   │   ├── refs/
   │   ├── COMMIT_EDITMSG
   │   ├── config
   │   ├── description
   │   ├── HEAD
   │   └── index
   ├── .idea/
   │   ├── inspectionProfiles/
   │   ├── .gitignore
   │   ├── book_store_mobile.iml
   │   ├── modules.xml
   │   ├── vcs.xml
   │   └── workspace.xml
   ├── .vscode/
   │   ├── .react/
   │   └── settings.json
   ├── node_modules/
   │   ├── .bin/
   │   ├── @0no-co/
   │   ├── @alloc/
   │   ├── @ampproject/
   │   ├── @babel/
   │   ├── @egjs/
   │   ├── @emnapi/
   │   ├── @eslint/
   │   ├── @eslint-community/
   │   ├── @expo/
   │   ├── @faker-js/
   │   ├── @humanfs/
   │   ├── @humanwhocodes/
   │   ├── @isaacs/
   │   ├── @istanbuljs/
   │   ├── @jest/
   │   ├── @jridgewell/
   │   ├── @modelcontextprotocol/
   │   ├── @napi-rs/
   │   ├── @nodelib/
   │   ├── @nolyfill/
   │   ├── @pkgjs/
   │   ├── @radix-ui/
   │   ├── @react-native/
   │   ├── @react-native-async-storage/
   │   ├── @react-navigation/
   │   ├── @rneui/
   │   ├── @rtsao/
   │   ├── @sinclair/
   │   ├── @sinonjs/
   │   ├── @tybys/
   │   ├── @types/
   │   ├── @typescript-eslint/
   │   ├── @unrs/
   │   ├── @urql/
   │   ├── @xmldom/
   │   ├── abort-controller/
   │   ├── accepts/
   │   ├── acorn/
   │   ├── acorn-jsx/
   │   ├── agent-base/
   │   ├── ajv/
   │   ├── ajv-formats/
   │   ├── anser/
   │   ├── ansi-escapes/
   │   ├── ansi-regex/
   │   ├── ansi-styles/
   │   ├── any-promise/
   │   ├── anymatch/
   │   ├── arg/
   │   ├── argparse/
   │   ├── array-buffer-byte-length/
   │   ├── array-includes/
   │   ├── array-timsort/
   │   ├── array.prototype.findlast/
   │   ├── array.prototype.findlastindex/
   │   ├── array.prototype.flat/
   │   ├── array.prototype.flatmap/
   │   ├── array.prototype.tosorted/
   │   ├── arraybuffer.prototype.slice/
   │   ├── asap/
   │   ├── async-function/
   │   ├── async-limiter/
   │   ├── asynckit/
   │   ├── autoprefixer/
   │   ├── available-typed-arrays/
   │   ├── axios/
   │   ├── babel-jest/
   │   ├── babel-plugin-istanbul/
   │   ├── babel-plugin-jest-hoist/
   │   ├── babel-plugin-polyfill-corejs2/
   │   ├── babel-plugin-polyfill-corejs3/
   │   ├── babel-plugin-polyfill-regenerator/
   │   ├── babel-plugin-react-native-web/
   │   ├── babel-plugin-syntax-hermes-parser/
   │   ├── babel-plugin-transform-flow-enums/
   │   ├── babel-preset-current-node-syntax/
   │   ├── babel-preset-expo/
   │   ├── babel-preset-jest/
   │   ├── balanced-match/
   │   ├── base64-js/
   │   ├── better-opn/
   │   ├── big-integer/
   │   ├── binary-extensions/
   │   ├── body-parser/
   │   ├── bplist-creator/
   │   ├── bplist-parser/
   │   ├── brace-expansion/
   │   ├── braces/
   │   ├── browserslist/
   │   ├── bser/
   │   ├── buffer/
   │   ├── buffer-from/
   │   ├── bytes/
   │   ├── call-bind/
   │   ├── call-bind-apply-helpers/
   │   ├── call-bound/
   │   ├── caller-callsite/
   │   ├── caller-path/
   │   ├── callsites/
   │   ├── camelcase/
   │   ├── camelcase-css/
   │   ├── caniuse-lite/
   │   ├── chalk/
   │   ├── chokidar/
   │   ├── chownr/
   │   ├── chrome-launcher/
   │   ├── chromium-edge-launcher/
   │   ├── ci-info/
   │   ├── cli-cursor/
   │   ├── cli-spinners/
   │   ├── client-only/
   │   ├── cliui/
   │   ├── clone/
   │   ├── color/
   │   ├── color-convert/
   │   ├── color-name/
   │   ├── color-string/
   │   ├── combined-stream/
   │   ├── commander/
   │   ├── comment-json/
   │   ├── compressible/
   │   ├── compression/
   │   ├── concat-map/
   │   ├── connect/
   │   ├── content-disposition/
   │   ├── content-type/
   │   ├── convert-source-map/
   │   ├── cookie/
   │   ├── cookie-signature/
   │   ├── core-js-compat/
   │   ├── core-util-is/
   │   ├── cors/
   │   ├── cosmiconfig/
   │   ├── cross-fetch/
   │   ├── cross-spawn/
   │   ├── crypto-random-string/
   │   ├── css-in-js-utils/
   │   ├── cssesc/
   │   ├── csstype/
   │   ├── data-view-buffer/
   │   ├── data-view-byte-length/
   │   ├── data-view-byte-offset/
   │   ├── debug/
   │   ├── decode-uri-component/
   │   ├── deep-extend/
   │   ├── deep-is/
   │   ├── deepmerge/
   │   ├── defaults/
   │   ├── define-data-property/
   │   ├── define-lazy-prop/
   │   ├── define-properties/
   │   ├── delayed-stream/
   │   ├── depd/
   │   ├── destroy/
   │   ├── detect-libc/
   │   ├── didyoumean/
   │   ├── dlv/
   │   ├── doctrine/
   │   ├── dotenv/
   │   ├── dotenv-expand/
   │   ├── dunder-proto/
   │   ├── eastasianwidth/
   │   ├── ee-first/
   │   ├── electron-to-chromium/
   │   ├── emoji-regex/
   │   ├── encodeurl/
   │   ├── env-editor/
   │   ├── error-ex/
   │   ├── error-stack-parser/
   │   ├── es-abstract/
   │   ├── es-define-property/
   │   ├── es-errors/
   │   ├── es-iterator-helpers/
   │   ├── es-object-atoms/
   │   ├── es-set-tostringtag/
   │   ├── es-shim-unscopables/
   │   ├── es-to-primitive/
   │   ├── escalade/
   │   ├── escape-html/
   │   ├── escape-string-regexp/
   │   ├── eslint/
   │   ├── eslint-config-expo/
   │   ├── eslint-import-resolver-node/
   │   ├── eslint-import-resolver-typescript/
   │   ├── eslint-module-utils/
   │   ├── eslint-plugin-expo/
   │   ├── eslint-plugin-import/
   │   ├── eslint-plugin-react/
   │   ├── eslint-plugin-react-hooks/
   │   ├── eslint-scope/
   │   ├── eslint-visitor-keys/
   │   ├── espree/
   │   ├── esprima/
   │   ├── esquery/
   │   ├── esrecurse/
   │   ├── estraverse/
   │   ├── esutils/
   │   ├── etag/
   │   ├── event-target-shim/
   │   ├── eventsource/
   │   ├── eventsource-parser/
   │   ├── exec-async/
   │   ├── expo/
   │   ├── expo-asset/
   │   ├── expo-blur/
   │   ├── expo-constants/
   │   ├── expo-file-system/
   │   ├── expo-font/
   │   ├── expo-haptics/
   │   ├── expo-image/
   │   ├── expo-keep-awake/
   │   ├── expo-linking/
   │   ├── expo-modules-autolinking/
   │   ├── expo-modules-core/
   │   ├── expo-router/
   │   ├── expo-splash-screen/
   │   ├── expo-status-bar/
   │   ├── expo-symbols/
   │   ├── expo-system-ui/
   │   ├── expo-web-browser/
   │   ├── exponential-backoff/
   │   ├── express/
   │   ├── express-rate-limit/
   │   ├── fast-deep-equal/
   │   ├── fast-glob/
   │   ├── fast-json-stable-stringify/
   │   ├── fast-levenshtein/
   │   ├── fast-uri/
   │   ├── fastq/
   │   ├── fb-watchman/
   │   ├── fbjs/
   │   ├── fbjs-css-vars/
   │   ├── fdir/
   │   ├── file-entry-cache/
   │   ├── fill-range/
   │   ├── filter-obj/
   │   ├── finalhandler/
   │   ├── find-up/
   │   ├── flat-cache/
   │   ├── flatted/
   │   ├── flow-enums-runtime/
   │   ├── follow-redirects/
   │   ├── fontfaceobserver/
   │   ├── for-each/
   │   ├── foreground-child/
   │   ├── form-data/
   │   ├── forwarded/
   │   ├── fraction.js/
   │   ├── freeport-async/
   │   ├── fresh/
   │   ├── fs.realpath/
   │   ├── function-bind/
   │   ├── function.prototype.name/
   │   ├── functions-have-names/
   │   ├── gensync/
   │   ├── get-caller-file/
   │   ├── get-intrinsic/
   │   ├── get-package-type/
   │   ├── get-proto/
   │   ├── get-symbol-description/
   │   ├── get-tsconfig/
   │   ├── getenv/
   │   ├── glob/
   │   ├── glob-parent/
   │   ├── globals/
   │   ├── globalthis/
   │   ├── gopd/
   │   ├── graceful-fs/
   │   ├── graphemer/
   │   ├── has-bigints/
   │   ├── has-flag/
   │   ├── has-own-prop/
   │   ├── has-property-descriptors/
   │   ├── has-proto/
   │   ├── has-symbols/
   │   ├── has-tostringtag/
   │   ├── hasown/
   │   ├── hermes-estree/
   │   ├── hermes-parser/
   │   ├── hoist-non-react-statics/
   │   ├── hosted-git-info/
   │   ├── http-errors/
   │   ├── https-proxy-agent/
   │   ├── hyphenate-style-name/
   │   ├── iconv-lite/
   │   ├── ieee754/
   │   ├── ignore/
   │   ├── image-size/
   │   ├── import-fresh/
   │   ├── imurmurhash/
   │   ├── inflight/
   │   ├── inherits/
   │   ├── ini/
   │   ├── inline-style-prefixer/
   │   ├── internal-slot/
   │   ├── invariant/
   │   ├── ipaddr.js/
   │   ├── is-array-buffer/
   │   ├── is-arrayish/
   │   ├── is-async-function/
   │   ├── is-bigint/
   │   ├── is-binary-path/
   │   ├── is-boolean-object/
   │   ├── is-bun-module/
   │   ├── is-callable/
   │   ├── is-core-module/
   │   ├── is-data-view/
   │   ├── is-date-object/
   │   ├── is-directory/
   │   ├── is-docker/
   │   ├── is-extglob/
   │   ├── is-finalizationregistry/
   │   ├── is-fullwidth-code-point/
   │   ├── is-generator-function/
   │   ├── is-glob/
   │   ├── is-map/
   │   ├── is-number/
   │   ├── is-number-object/
   │   ├── is-plain-obj/
   │   ├── is-promise/
   │   ├── is-regex/
   │   ├── is-set/
   │   ├── is-shared-array-buffer/
   │   ├── is-string/
   │   ├── is-symbol/
   │   ├── is-typed-array/
   │   ├── is-weakmap/
   │   ├── is-weakref/
   │   ├── is-weakset/
   │   ├── is-wsl/
   │   ├── isarray/
   │   ├── isexe/
   │   ├── istanbul-lib-coverage/
   │   ├── istanbul-lib-instrument/
   │   ├── iterator.prototype/
   │   ├── jackspeak/
   │   ├── jest-environment-node/
   │   ├── jest-get-type/
   │   ├── jest-haste-map/
   │   ├── jest-message-util/
   │   ├── jest-mock/
   │   ├── jest-regex-util/
   │   ├── jest-util/
   │   ├── jest-validate/
   │   ├── jest-worker/
   │   ├── jimp-compact/
   │   ├── jiti/
   │   ├── js-tokens/
   │   ├── js-yaml/
   │   ├── jsc-safe-url/
   │   ├── jsesc/
   │   ├── json-buffer/
   │   ├── json-parse-better-errors/
   │   ├── json-schema-traverse/
   │   ├── json-stable-stringify-without-jsonify/
   │   ├── json5/
   │   ├── jsx-ast-utils/
   │   ├── keyv/
   │   ├── kleur/
   │   ├── lan-network/
   │   ├── leven/
   │   ├── levn/
   │   ├── lighthouse-logger/
   │   ├── lightningcss/
   │   ├── lightningcss-win32-x64-msvc/
   │   ├── lilconfig/
   │   ├── lines-and-columns/
   │   ├── locate-path/
   │   ├── lodash/
   │   ├── lodash.debounce/
   │   ├── lodash.merge/
   │   ├── lodash.throttle/
   │   ├── log-symbols/
   │   ├── loose-envify/
   │   ├── lru-cache/
   │   ├── makeerror/
   │   ├── marky/
   │   ├── math-intrinsics/
   │   ├── media-typer/
   │   ├── memoize-one/
   │   ├── merge-descriptors/
   │   ├── merge-options/
   │   ├── merge-stream/
   │   ├── merge2/
   │   ├── metro/
   │   ├── metro-babel-transformer/
   │   ├── metro-cache/
   │   ├── metro-cache-key/
   │   ├── metro-config/
   │   ├── metro-core/
   │   ├── metro-file-map/
   │   ├── metro-minify-terser/
   │   ├── metro-resolver/
   │   ├── metro-runtime/
   │   ├── metro-source-map/
   │   ├── metro-symbolicate/
   │   ├── metro-transform-plugins/
   │   ├── metro-transform-worker/
   │   ├── micromatch/
   │   ├── mime/
   │   ├── mime-db/
   │   ├── mime-types/
   │   ├── mimic-fn/
   │   ├── minimatch/
   │   ├── minimist/
   │   ├── minipass/
   │   ├── minizlib/
   │   ├── mkdirp/
   │   ├── ms/
   │   ├── mz/
   │   ├── nanoid/
   │   ├── napi-postinstall/
   │   ├── nativewind/
   │   ├── natural-compare/
   │   ├── negotiator/
   │   ├── nested-error-stacks/
   │   ├── node-fetch/
   │   ├── node-forge/
   │   ├── node-int64/
   │   ├── node-releases/
   │   ├── normalize-path/
   │   ├── normalize-range/
   │   ├── npm-package-arg/
   │   ├── nullthrows/
   │   ├── ob1/
   │   ├── object-assign/
   │   ├── object-hash/
   │   ├── object-inspect/
   │   ├── object-keys/
   │   ├── object.assign/
   │   ├── object.entries/
   │   ├── object.fromentries/
   │   ├── object.groupby/
   │   ├── object.values/
   │   ├── on-finished/
   │   ├── on-headers/
   │   ├── once/
   │   ├── onetime/
   │   ├── open/
   │   ├── optionator/
   │   ├── ora/
   │   ├── own-keys/
   │   ├── p-limit/
   │   ├── p-locate/
   │   ├── p-try/
   │   ├── package-json-from-dist/
   │   ├── parent-module/
   │   ├── parse-json/
   │   ├── parse-png/
   │   ├── parseurl/
   │   ├── path-exists/
   │   ├── path-is-absolute/
   │   ├── path-key/
   │   ├── path-parse/
   │   ├── path-scurry/
   │   ├── path-to-regexp/
   │   ├── picocolors/
   │   ├── picomatch/
   │   ├── pify/
   │   ├── pirates/
   │   ├── pkce-challenge/
   │   ├── plist/
   │   ├── pngjs/
   │   ├── possible-typed-array-names/
   │   ├── postcss/
   │   ├── postcss-import/
   │   ├── postcss-js/
   │   ├── postcss-load-config/
   │   ├── postcss-nested/
   │   ├── postcss-selector-parser/
   │   ├── postcss-value-parser/
   │   ├── prelude-ls/
   │   ├── pretty-bytes/
   │   ├── pretty-format/
   │   ├── proc-log/
   │   ├── progress/
   │   ├── promise/
   │   ├── prompts/
   │   ├── prop-types/
   │   ├── proxy-addr/
   │   ├── proxy-from-env/
   │   ├── punycode/
   │   ├── qrcode-terminal/
   │   ├── qs/
   │   ├── query-string/
   │   ├── queue/
   │   ├── queue-microtask/
   │   ├── range-parser/
   │   ├── raw-body/
   │   ├── rc/
   │   ├── react/
   │   ├── react-devtools-core/
   │   ├── react-dom/
   │   ├── react-fast-compare/
   │   ├── react-freeze/
   │   ├── react-is/
   │   ├── react-native/
   │   ├── react-native-css-interop/
   │   ├── react-native-edge-to-edge/
   │   ├── react-native-gesture-handler/
   │   ├── react-native-is-edge-to-edge/
   │   ├── react-native-ratings/
   │   ├── react-native-reanimated/
   │   ├── react-native-safe-area-context/
   │   ├── react-native-screens/
   │   ├── react-native-size-matters/
   │   ├── react-native-web/
   │   ├── react-native-webview/
   │   ├── react-refresh/
   │   ├── read-cache/
   │   ├── readdirp/
   │   ├── reflect.getprototypeof/
   │   ├── regenerate/
   │   ├── regenerate-unicode-properties/
   │   ├── regenerator-runtime/
   │   ├── regexp.prototype.flags/
   │   ├── regexpu-core/
   │   ├── regjsgen/
   │   ├── regjsparser/
   │   ├── repeat-string/
   │   ├── require-directory/
   │   ├── require-from-string/
   │   ├── requireg/
   │   ├── resolve/
   │   ├── resolve-from/
   │   ├── resolve-pkg-maps/
   │   ├── resolve-workspace-root/
   │   ├── resolve.exports/
   │   ├── restore-cursor/
   │   ├── reusify/
   │   ├── rimraf/
   │   ├── router/
   │   ├── run-parallel/
   │   ├── safe-array-concat/
   │   ├── safe-buffer/
   │   ├── safe-push-apply/
   │   ├── safe-regex-test/
   │   ├── safer-buffer/
   │   ├── sax/
   │   ├── scheduler/
   │   ├── schema-utils/
   │   ├── semver/
   │   ├── send/
   │   ├── serialize-error/
   │   ├── serve-static/
   │   ├── server-only/
   │   ├── set-function-length/
   │   ├── set-function-name/
   │   ├── set-proto/
   │   ├── setimmediate/
   │   ├── setprototypeof/
   │   ├── sf-symbols-typescript/
   │   ├── shallowequal/
   │   ├── shebang-command/
   │   ├── shebang-regex/
   │   ├── shell-quote/
   │   ├── side-channel/
   │   ├── side-channel-list/
   │   ├── side-channel-map/
   │   ├── side-channel-weakmap/
   │   ├── signal-exit/
   │   ├── simple-plist/
   │   ├── simple-swizzle/
   │   ├── sisteransi/
   │   ├── slash/
   │   ├── slugify/
   │   ├── source-map/
   │   ├── source-map-js/
   │   ├── source-map-support/
   │   ├── split-on-first/
   │   ├── sprintf-js/
   │   ├── stable-hash/
   │   ├── stack-utils/
   │   ├── stackframe/
   │   ├── stacktrace-parser/
   │   ├── statuses/
   │   ├── stream-buffers/
   │   ├── strict-uri-encode/
   │   ├── string-width/
   │   ├── string-width-cjs/
   │   ├── string.prototype.matchall/
   │   ├── string.prototype.repeat/
   │   ├── string.prototype.trim/
   │   ├── string.prototype.trimend/
   │   ├── string.prototype.trimstart/
   │   ├── strip-ansi/
   │   ├── strip-ansi-cjs/
   │   ├── strip-bom/
   │   ├── strip-json-comments/
   │   ├── structured-headers/
   │   ├── styleq/
   │   ├── sucrase/
   │   ├── supports-color/
   │   ├── supports-hyperlinks/
   │   ├── supports-preserve-symlinks-flag/
   │   ├── tailwindcss/
   │   ├── tar/
   │   ├── temp-dir/
   │   ├── terminal-link/
   │   ├── terser/
   │   ├── test-exclude/
   │   ├── thenify/
   │   ├── thenify-all/
   │   ├── throat/
   │   ├── tinyglobby/
   │   ├── tmpl/
   │   ├── to-regex-range/
   │   ├── toidentifier/
   │   ├── tr46/
   │   ├── ts-api-utils/
   │   ├── ts-interface-checker/
   │   ├── tsconfig-paths/
   │   ├── type-check/
   │   ├── type-detect/
   │   ├── type-fest/
   │   ├── type-is/
   │   ├── typed-array-buffer/
   │   ├── typed-array-byte-length/
   │   ├── typed-array-byte-offset/
   │   ├── typed-array-length/
   │   ├── typescript/
   │   ├── ua-parser-js/
   │   ├── unbox-primitive/
   │   ├── undici/
   │   ├── undici-types/
   │   ├── unicode-canonical-property-names-ecmascript/
   │   ├── unicode-match-property-ecmascript/
   │   ├── unicode-match-property-value-ecmascript/
   │   ├── unicode-property-aliases-ecmascript/
   │   ├── unique-string/
   │   ├── unpipe/
   │   ├── unrs-resolver/
   │   ├── update-browserslist-db/
   │   ├── uri-js/
   │   ├── use-latest-callback/
   │   ├── use-sync-external-store/
   │   ├── util-deprecate/
   │   ├── utils-merge/
   │   ├── uuid/
   │   ├── validate-npm-package-name/
   │   ├── vary/
   │   ├── vlq/
   │   ├── walker/
   │   ├── warn-once/
   │   ├── wcwidth/
   │   ├── webidl-conversions/
   │   ├── whatwg-fetch/
   │   ├── whatwg-url/
   │   ├── whatwg-url-without-unicode/
   │   ├── which/
   │   ├── which-boxed-primitive/
   │   ├── which-builtin-type/
   │   ├── which-collection/
   │   ├── which-typed-array/
   │   ├── wonka/
   │   ├── word-wrap/
   │   ├── wrap-ansi/
   │   ├── wrap-ansi-cjs/
   │   ├── wrappy/
   │   ├── write-file-atomic/
   │   ├── ws/
   │   ├── xcode/
   │   ├── xml2js/
   │   ├── xmlbuilder/
   │   ├── y18n/
   │   ├── yallist/
   │   ├── yaml/
   │   ├── yargs/
   │   ├── yargs-parser/
   │   ├── yocto-queue/
   │   ├── zod/
   │   ├── zod-to-json-schema/
   │   └── .package-lock.json
   ├── src/
   │   ├── app/
   │   │   ├── (app)/
   │   │   │   ├── (home)/
   │   │   │   │   ├── _layout.js
   │   │   │   │   └── index.js
   │   │   │   ├── account/
   │   │   │   │   ├── _layout.js
   │   │   │   │   └── index.jsx
   │   │   │   ├── blog/
   │   │   │   │   ├── [id].js
   │   │   │   │   ├── _layout.js
   │   │   │   │   └── index.js
   │   │   │   ├── cart/
   │   │   │   │   ├── _layout.js
   │   │   │   │   └── index.js
   │   │   │   ├── checkout/
   │   │   │   │   ├── _layout.js
   │   │   │   │   └── index.js
   │   │   │   ├── notification/
   │   │   │   │   ├── _layout.js
   │   │   │   │   └── index.jsx
   │   │   │   ├── product/
   │   │   │   │   ├── [id].js
   │   │   │   │   ├── _layout.js
   │   │   │   │   └── index.jsx
   │   │   │   └── _layout.js
   │   │   ├── (auth)/
   │   │   │   ├── forgot-password/
   │   │   │   │   └── index.js
   │   │   │   ├── login/
   │   │   │   │   └── index.js
   │   │   │   ├── register/
   │   │   │   │   └── index.js
   │   │   │   ├── reset-password/
   │   │   │   │   └── index.js
   │   │   │   └── _layout.js
   │   │   ├── _layout.js
   │   │   └── index.js
   │   ├── assets/
   │   │   └── fonts/
   │   │       └── SpaceMono-Regular.ttf
   │   ├── components/
   │   │   └── layouts/
   │   │       ├── HeaderLeftBackIcon.jsx
   │   │       └── HeaderRightIcon.jsx
   │   ├── contexts/
   │   │   ├── AuthContext.js
   │   │   ├── CartContext.js
   │   │   ├── index.js
   │   │   └── NotificationContext.js
   │   ├── screens/
   │   │   ├── account/
   │   │   │   └── AccountScreen.jsx
   │   │   ├── auth/
   │   │   │   ├── ForgotPasswordScreen.jsx
   │   │   │   ├── LoginScreen.jsx
   │   │   │   ├── RegisterScreen.jsx
   │   │   │   └── ResetPasswordScreen.jsx
   │   │   ├── blog/
   │   │   │   ├── BlogDetailScreen.jsx
   │   │   │   └── BlogScreen.jsx
   │   │   ├── cart/
   │   │   │   └── CartScreen.jsx
   │   │   ├── checkout/
   │   │   │   └── CheckoutScreen.jsx
   │   │   ├── home/
   │   │   │   └── HomeScreen.jsx
   │   │   ├── notification/
   │   │   │   └── NotificationScreen.jsx
   │   │   └── product/
   │   │       ├── ProductDetailScreen.jsx
   │   │       └── ProductScreen.jsx
   │   ├── services/
   │   │   ├── api.js
   │   │   ├── blogService.js
   │   │   ├── cartService.js
   │   │   ├── categoryService.js
   │   │   ├── customerService.js
   │   │   ├── fileService.js
   │   │   ├── identityService.js
   │   │   ├── index.js
   │   │   ├── notificationService.js
   │   │   ├── orderService.js
   │   │   ├── paymentService.js
   │   │   ├── productService.js
   │   │   └── profileService.js
   │   └── global.css
   ├── .env
   ├── .gitignore
   ├── app.d.ts
   ├── app.json
   ├── babel.config.js
   ├── eslint.config.js
   ├── expo-env.d.ts
   ├── global.d.ts
   ├── index.js
   ├── metro.config.js
   ├── nativewind-env.d.ts
   ├── package-lock.json
   ├── package.json
   ├── postcss.config.js
   ├── README.md
   ├── tailwind.config.js
   └── tsconfig.json
   ------------------------------------------------------------ */

/* ===== app.json ===== */
{
  "expo": {
    "name": "book_store_mobile",
    "slug": "book_store_mobile",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./src/assets/images/icon.png",
    "scheme": "bookstoremobile",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "router": {
      "entry": "src/app/index"
    },
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./src/assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "edgeToEdgeEnabled": true
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./src/assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./src/assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}


/* ===== index.js ===== */
import 'expo-router/entry';


/* ===== package.json ===== */
{
  "name": "book_store_mobile",
  "main": "expo-router/entry",
  "expo": {
    "router": {
      "entry": "src/app/index"
    }
  },
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "lint": "expo lint"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.1.0",
    "@faker-js/faker": "^9.8.0",
    "@react-native-async-storage/async-storage": "^2.1.2",
    "@react-navigation/bottom-tabs": "^7.3.10",
    "@react-navigation/elements": "^2.3.8",
    "@react-navigation/native": "^7.1.6",
    "@rneui/base": "^4.0.0-rc.8",
    "@rneui/themed": "^4.0.0-rc.8",
    "axios": "^1.9.0",
    "expo": "~53.0.9",
    "expo-blur": "~14.1.4",
    "expo-constants": "~17.1.6",
    "expo-font": "~13.3.1",
    "expo-haptics": "~14.1.4",
    "expo-image": "~2.1.7",
    "expo-linking": "~7.1.5",
    "expo-router": "~5.0.6",
    "expo-splash-screen": "~0.30.8",
    "expo-status-bar": "~2.2.3",
    "expo-symbols": "~0.4.4",
    "expo-system-ui": "~5.0.7",
    "expo-web-browser": "~14.1.6",
    "react": "19.0.0",
    "react-dom": "19.0.0",
    "react-native": "0.79.2",
    "react-native-gesture-handler": "~2.24.0",
    "react-native-reanimated": "~3.17.4",
    "react-native-safe-area-context": "5.4.0",
    "react-native-screens": "~4.10.0",
    "react-native-web": "~0.20.0",
    "react-native-webview": "13.13.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/react": "~19.0.10",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.25.0",
    "eslint-config-expo": "~9.2.0",
    "nativewind": "^4.1.23",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.8.3"
  },
  "private": true
}


/* ===== src\global.css ===== */
@tailwind base;
@tailwind components;
@tailwind utilities; 

/* ===== src\app\index.js ===== */
// src/app/index.js
import { Redirect } from 'expo-router';
import React from 'react';

export default function IndexRoute() {
    return <Redirect href="/(app)/(home)/" />;
} 

/* ===== src\app\_layout.js ===== */
import AppProviders from '@/contexts';
import { Slot, SplashScreen } from 'expo-router';
import React from 'react';
import "../global.css";

SplashScreen.preventAutoHideAsync();

export default function RootLayoutRoute() {
    return (<AppProviders>
        <Slot />
    </AppProviders>);
} 

/* ===== src\app\(app)\_layout.js ===== */
/* ===== app/(app)/_layout.js ===== */
import HeaderRightIcon from '@/components/layouts/HeaderRightIcon';
import { FontAwesome, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons'; // Ví dụ icon
import { Tabs } from 'expo-router';
import React from 'react';

export default function AppTabsLayoutRoute() {
    return (<Tabs
        screenOptions={{
            headerShown: true,
            headerRight: () => <HeaderRightIcon />,
        }}
    >
        <Tabs.Screen
            name="(home)"
            options={{
                headerShown: false,
                headerRight: () => <HeaderRightIcon />,
                title: 'Trang chủ',
                tabBarIcon: ({ color, size }) => <FontAwesome name="home" size={size} color={color} />,
            }}
        />
        <Tabs.Screen
            name="blog"
            options={{
                headerShown: false,
                title: 'Tin tức',
                tabBarIcon: ({ color, size }) => <MaterialCommunityIcons name="post-outline" size={size}
                    color={color} />,
            }}
        />
        <Tabs.Screen
            name="product"
            options={{
                headerShown: false,
                title: 'Sản phẩm',
                tabBarIcon: ({ color, size }) => <Ionicons name="search" size={size} color={color} />,
            }}
        />

        <Tabs.Screen
            name="cart"
            options={{
                headerShown: false,
                title: ' Giỏ hàng',
                tabBarIcon: ({ color, size }) => <Ionicons name="cart" size={size} color={color} />,
            }}
        />
        <Tabs.Screen
            name="account"
            options={{
                title: 'Tài khoản',
                headerShown: false,
                tabBarIcon: ({ color, size }) => <MaterialCommunityIcons name="account-circle" size={size}
                    color={color} />,
            }}
        />

        {/* Các screen này không hiển thị trên tab bar, được điều hướng tới */}
        <Tabs.Screen
            name="notification"
            options={{
                title: 'Giỏ hàng', headerShown: false, href: null
            }}
        />
        <Tabs.Screen
            name="checkout"
            options={{
                title: 'Thanh toán', headerShown: false, href: null
            }}
        />
    </Tabs>);
}

/* ===== src\app\(app)\(home)\index.js ===== */
import HomeScreen from "@/screens/home/HomeScreen";

export default function HomeRoute() { // Hoặc ProductListRoute
    return <HomeScreen></HomeScreen>;
} 

/* ===== src\app\(app)\(home)\_layout.js ===== */
import HeaderRightIcon from "@/components/layouts/HeaderRightIcon";
import { Stack } from 'expo-router';
import React from 'react';

export default function HomeStackLayoutRoute() {
    return (<Stack>
        <Stack.Screen name="index"
            options={{
                headerShown: true, title: 'Trang chủ', headerRight: () => (<HeaderRightIcon />)
            }}
        />
    </Stack>);
}

/* ===== src\app\(app)\account\index.jsx ===== */
import React from 'react';
import AccountScreen from "@/screens/account/AccountScreen";

function AccountRoute() {
    return (<AccountScreen></AccountScreen>);
}

export default AccountRoute;

/* ===== src\app\(app)\account\_layout.js ===== */
import {Stack} from 'expo-router';
import React from 'react';
import HeaderRightIcon from "@/components/layouts/HeaderRightIcon";

export default function AccountStackLayoutRoute() {
    return (<Stack>
        <Stack.Screen name="index"
                      options={{headerShown: true, title: 'Tài khoản', headerRight: () => <HeaderRightIcon/>,}}/>
    </Stack>);
} 

/* ===== src\app\(app)\blog\index.js ===== */
import BlogScreen from "@/screens/blog/BlogScreen";

export default function BlogRoute() {
    return <BlogScreen/>;
}

/* ===== src\app\(app)\blog\[id].js ===== */
import BlogDetailScreen from "@/screens/blog/BlogDetailScreen";

export default function BlogDetailRoute() {
  return <BlogDetailScreen/>;
} 

/* ===== src\app\(app)\blog\_layout.js ===== */
import {Stack} from 'expo-router';
import React from 'react';
import HeaderRightIcon from "@/components/layouts/HeaderRightIcon";

export default function BlogStackLayoutRoute() {
    return (<Stack>
        <Stack.Screen name="index" options={{title: 'Tin tức & Bài viết', headerRight: () => <HeaderRightIcon/>,}}/>
        <Stack.Screen name="[id]" options={{title: 'Chi tiết bài viết', headerRight: () => <HeaderRightIcon/>,}}/>
    </Stack>);
} 

/* ===== src\app\(app)\cart\index.js ===== */
import CartScreen from "@/screens/cart/CartScreen";

export default function CartRoute() { // Hoặc ProductListRoute
    return <CartScreen></CartScreen>;
}

/* ===== src\app\(app)\cart\_layout.js ===== */
import {Stack} from 'expo-router';
import React from 'react';
import HeaderRightIcon from "@/components/layouts/HeaderRightIcon";

export default function CartStackLayoutRoute() {
    return (<Stack>
        <Stack.Screen name="index" options={{title: 'Giỏ hàng của bạn', headerRight: () => <HeaderRightIcon/>,}}/>
    </Stack>);
} 

/* ===== src\app\(app)\checkout\index.js ===== */
import CheckoutScreen from "@/screens/checkout/CheckoutScreen";

export default function AddressSelectionRoute() {
    return <CheckoutScreen/>;
} 

/* ===== src\app\(app)\checkout\_layout.js ===== */
import {Stack} from 'expo-router';
import React from 'react';

export default function CheckoutStackLayoutRoute() {
    return (<Stack>
            <Stack.Screen name="index" options={{title: 'Thanh toán'}}/>
        </Stack>);
} 

/* ===== src\app\(app)\notification\index.jsx ===== */
import React from 'react';
import NotificationScreen from "@/screens/notification/NotificationScreen";

function NotificationRoute() {
    return (<NotificationScreen></NotificationScreen>);
}

export default NotificationRoute;

/* ===== src\app\(app)\notification\_layout.js ===== */
import {Stack} from 'expo-router';
import React from 'react';
import HeaderRightIcon from "@/components/layouts/HeaderRightIcon";
import HeaderLeftBackIcon from "@/components/layouts/HeaderLeftBackIcon";

export default function NotificationStackLayoutRoute() {
    return (<Stack>
        <Stack.Screen name="index" options={{title: 'Thông báo', headerLeft: () => <HeaderLeftBackIcon/>}}/>
    </Stack>);
}

/* ===== src\app\(app)\product\index.jsx ===== */
import React from 'react';
import ProductScreen from "@/screens/product/ProductScreen";

function ProductRoute() {
    return (<ProductScreen></ProductScreen>);
}

export default ProductRoute;

/* ===== src\app\(app)\product\[id].js ===== */
import ProductDetailScreen from "@/screens/product/ProductDetailScreen";
import { useLocalSearchParams } from "expo-router";

export default function ProductDetailRoute() {
    const { id } = useLocalSearchParams()
    return <ProductDetailScreen id={id} />;
}

/* ===== src\app\(app)\product\_layout.js ===== */
import {Stack} from 'expo-router';
import React from 'react';
import HeaderRightIcon from "@/components/layouts/HeaderRightIcon";

export default function ProductStackLayoutRoute() {
    return (<Stack>
        <Stack.Screen name="index" options={{title: 'Tìm kiếm sách', headerRight: () => <HeaderRightIcon/>,}}/>
        <Stack.Screen name="[id]" options={{title: 'Chi tiết sách', headerRight: () => <HeaderRightIcon/>,}}/>
    </Stack>);
}

/* ===== src\app\(auth)\_layout.js ===== */
import {Stack} from 'expo-router';
import React from 'react';

export default function AuthStackLayoutRoute() {
    return (<Stack screenOptions={{headerShown: false}}>
        <Stack.Screen name="login"/>
        <Stack.Screen name="register"/>
        <Stack.Screen name="forgot-password"/>
        <Stack.Screen name="reset-password"/>
    </Stack>);
} 

/* ===== src\app\(auth)\forgot-password\index.js ===== */
import ForgotPasswordScreen from "@/screens/auth/ForgotPasswordScreen";

export default function ForgotPasswordRoute() {
    return <ForgotPasswordScreen/>;
}

/* ===== src\app\(auth)\login\index.js ===== */
import LoginScreen from "@/screens/auth/LoginScreen";

export default function LoginRoute() {
    return <LoginScreen></LoginScreen>;
}

/* ===== src\app\(auth)\register\index.js ===== */
// src/app/(auth)/register.js
import RegisterScreen from "@/screens/auth/RegisterScreen";

export default function RegisterRoute() {
    return <RegisterScreen/>;
}

/* ===== src\app\(auth)\reset-password\index.js ===== */
// src/app/(auth)/reset-password.js
import ResetPasswordScreen from "@/screens/auth/ResetPasswordScreen";

export default function ResetPasswordRoute() {
    return <ResetPasswordScreen></ResetPasswordScreen>;
}

/* ===== src\components\layouts\HeaderLeftBackIcon.jsx ===== */
import React from 'react';
import {TouchableOpacity} from 'react-native';
import {Ionicons} from '@expo/vector-icons';
import {useRouter} from 'expo-router';

export default function HeaderLeftBackIcon({color = 'black', size = 26}) {
    const router = useRouter();

    return (<TouchableOpacity
        onPress={() => router.back()}
        accessibilityLabel="Thông báo"
        accessibilityRole="button"
    >
        <Ionicons name="arrow-back-outline" size={size} color={color}/>
    </TouchableOpacity>);
}

/* ===== src\components\layouts\HeaderRightIcon.jsx ===== */
import React from 'react';
import {TouchableOpacity} from 'react-native';
import {Ionicons} from '@expo/vector-icons';
import {useRouter} from 'expo-router';

export default function HeaderRightIcon({color = 'black', size = 26}) {
    const router = useRouter();

    return (<TouchableOpacity
        onPress={() => router.push('/(app)/notification')}
        className="p-2"
        accessibilityLabel="Thông báo"
        accessibilityRole="button"
    >
        <Ionicons name="notifications-outline" size={size} color={color}/>
    </TouchableOpacity>);
}

/* ===== src\contexts\AuthContext.js ===== */
// src/contexts/AuthContext.js
import { useRouter, useSegments } from 'expo-router';
import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';
import { identityService, profileService } from '../services'; // Sử dụng identityService và profileService
import AsyncStorage from '@react-native-async-storage/async-storage';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const router = useRouter();
    const segments = useSegments();

    const attemptLoadUser = useCallback(async () => {
        console.log('Attempting to load user...');
        try {
            setIsLoading(true);
            const token = await identityService.getAuthToken();
            if (token) {
                console.log('Token found, fetching user info...');
                // Token tồn tại, thử lấy thông tin người dùng
                // getMyInfo sẽ tự động xử lý việc token hợp lệ hay không thông qua interceptor của api.js
                const userInfoResponse = await profileService.getMyInfo();
                if (userInfoResponse && userInfoResponse.result) {
                    console.log('User info fetched successfully:', userInfoResponse.result);
                    setUser(userInfoResponse.result);
                    setIsAuthenticated(true);
                } else {
                    // Trường hợp này ít xảy ra nếu getMyInfo() ném lỗi khi token không hợp lệ
                    // nhưng để phòng trường hợp API trả về thành công mà không có result
                    console.log('getMyInfo successful but no user data, logging out.');
                    await identityService.logout(); // Xóa token không hợp lệ
                    setUser(null);
                    setIsAuthenticated(false);
                }
            } else {
                console.log('No token found.');
                setUser(null);
                setIsAuthenticated(false);
            }
        } catch (error) {
            // Lỗi có thể xảy ra nếu getMyInfo() ném lỗi (ví dụ 401 và interceptor không xử lý được refresh)
            console.error('Error loading user or invalid token:', error.message || error);
            // identityService.logout() đã được gọi trong interceptor của api.js nếu có lỗi 401
            // Chỉ cần đảm bảo trạng thái được cập nhật đúng
            setUser(null);
            setIsAuthenticated(false);
        } finally {
            setIsLoading(false);
            console.log('Finished loading user. isLoading:', false, 'isAuthenticated:', isAuthenticated);
        }
    }, []); // Thêm isAuthenticated vào dependency array nếu bạn muốn nó re-run khi isAuthenticated thay đổi từ bên ngoài

    useEffect(() => {
        attemptLoadUser();
    }, [attemptLoadUser]); // Chỉ chạy một lần khi component mount

    useEffect(() => {
        if (isLoading) {
            console.log('Auth state loading, skipping route protection.');
            return;
        }
        console.log('Auth state loaded. isAuthenticated:', isAuthenticated, 'Current segments:', segments);

        const inAuthGroup = segments[0] === '(auth)';

        if (!isAuthenticated && !inAuthGroup) {
            console.log('Not authenticated and not in auth group, redirecting to login.');
            router.replace('/(auth)/login');
        } else if (isAuthenticated && inAuthGroup) {
            console.log('Authenticated and in auth group, redirecting to home.');
            router.replace('/(app)/(home)/'); // Điều hướng đến màn hình chính trong (app) group
        } else {
            console.log('Routing condition not met or already in correct group.');
        }
    }, [isAuthenticated, segments, isLoading, router]);

    const login = async (username, password) => {
        try {
            setIsLoading(true);
            const loginResponse = await identityService.login({ username, password });
            // loginResponse là ApiResponse<AuthenticationResponse>
            if (loginResponse && loginResponse.result && loginResponse.result.token) {
                // Token đã được lưu trong identityService.login
                console.log('Login successful, fetching user info...');
                const userInfoResponse = await profileService.getMyInfo();
                if (userInfoResponse && userInfoResponse.result) {
                    setUser(userInfoResponse.result);
                    setIsAuthenticated(true);
                    console.log('User set in context:', userInfoResponse.result);
                    return loginResponse; // Trả về response gốc của login
                } else {
                    throw new Error("Failed to fetch user information after login.");
                }
            } else {
                // Xử lý trường hợp login API thành công nhưng không trả về token
                throw new Error(loginResponse.message || "Login failed, no token received.");
            }
        } catch (error) {
            console.error('Login error in AuthProvider:', error.message || error);
            setUser(null);
            setIsAuthenticated(false);
            throw error; // Ném lỗi để màn hình Login có thể xử lý
        } finally {
            setIsLoading(false);
        }
    };

    const register = async (userData) => { // { username, password, email }
        try {
            setIsLoading(true);
            const response = await identityService.register(userData);
            // Sau khi đăng ký thành công, backend có thể không tự động login user
            // User sẽ cần đăng nhập sau khi đăng ký
            return response; // ApiResponse<UserResponse> (result có thể null)
        } catch (error) {
            console.error('Register error in AuthProvider:', error.message || error);
            throw error;
        } finally {
            setIsLoading(false);
        }
    };

    const logout = async () => {
        try {
            setIsLoading(true);
            await identityService.logout(); // Xử lý cả API call và AsyncStorage
            setUser(null);
            setIsAuthenticated(false);
            router.replace('/(auth)/login');
            console.log('User logged out and redirected to login.');
        } catch (error) {
            // Lỗi ở đây thường là lỗi mạng khi gọi API logout, AsyncStorage vẫn sẽ được xóa
            console.error('Logout error in AuthProvider:', error.message || error);
            // Đảm bảo trạng thái local được reset ngay cả khi API logout thất bại
            setUser(null);
            setIsAuthenticated(false);
            router.replace('/(auth)/login');
        } finally {
            setIsLoading(false);
        }
    };

    const sendOtpForgotPassword = async (username) => {
        try {
            return await identityService.sendOtpForgotPassword(username);
        } catch (error) {
            console.error('Forgot password (send OTP) error in AuthProvider:', error.message || error);
            throw error;
        }
    };

    const verifyOtpAndGetResetToken = async (username, otp) => {
        try {
            const response = await identityService.verifyOtpForgotPassword(username, otp);
            // response.result.verificationToken
            return response; // Trả về toàn bộ ApiResponse để màn hình có thể lấy token
        } catch (error) {
            console.error('Verify OTP error in AuthProvider:', error.message || error);
            throw error;
        }
    };


    const resetPasswordWithVerificationToken = async (newPassword, verificationToken) => {
        try {
            return await identityService.resetPasswordWithToken(newPassword, verificationToken);
        } catch (error) {
            console.error('Reset password error in AuthProvider:', error.message || error);
            throw error;
        }
    };

    // Cập nhật email
    const updateMyEmail = async (email) => {
        try {
            setIsLoading(true);
            const response = await profileService.updateMyInfo({ email }); // identityService.updateMyInfo mong muốn { email }
            if (response && response.result) {
                setUser(prevUser => ({ ...prevUser, ...response.result })); // Cập nhật user state với thông tin mới
                await identityService.setCurrentUser(response.result); // Cập nhật AsyncStorage
            }
            return response;
        } catch (error) {
            console.error('Update email error in AuthProvider:', error.message || error);
            throw error;
        } finally {
            setIsLoading(false);
        }
    };

    // Cập nhật mật khẩu
    const updateMyPassword = async (oldPassword, newPassword) => {
        if (!user || !user.id) {
            console.error("User ID not available for password update.");
            throw new Error("User not authenticated or ID missing.");
        }
        try {
            // identityService.updateMyPassword yêu cầu userId
            return await identityService.updateMyPassword(user.id, { oldPassword, newPassword });
        } catch (error) {
            console.error('Update password error in AuthProvider:', error.message || error);
            throw error;
        }
    };

    // Cập nhật ảnh đại diện
    const updateMyProfileImage = async (profileImageFile) => {
        try {
            setIsLoading(true);
            const response = await identityService.updateMyProfileImage(profileImageFile);
            if (response && response.result && response.result.profileImage) {
                setUser(prevUser => ({
                    ...prevUser, profileImage: response.result.profileImage // Giả sử API trả về URL ảnh mới trong result.profileImage
                }));
                // identityService.updateMyProfileImage đã cập nhật AsyncStorage
            }
            return response;
        } catch (error) {
            console.error('Update profile image error in AuthProvider:', error.message || error);
            throw error;
        } finally {
            setIsLoading(false);
        }
    };

    const value = {
        user,
        isLoading,
        isAuthenticated,
        login,
        register,
        logout,
        sendOtpForgotPassword,
        verifyOtpAndGetResetToken,
        resetPasswordWithVerificationToken,
        updateMyEmail,
        updateMyPassword,
        updateMyProfileImage, // Các hàm khác liên quan đến profile chi tiết (tên, địa chỉ) sẽ gọi profileService
        // và có thể không cần thiết phải nằm trong AuthContext nếu chúng không ảnh hưởng trực tiếp đến trạng thái auth.
    };

    return (<AuthContext.Provider value={value}>
        {children}
    </AuthContext.Provider>);
};

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

export default AuthContext;


/* ===== src\contexts\CartContext.js ===== */
import React, { createContext, useContext, useEffect, useState } from 'react';
import { cartService } from '../services';
import { useAuth } from './AuthContext';

const CartContext = createContext(null);

export const CartProvider = ({ children }) => {
  const [cart, setCart] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const { isAuthenticated } = useAuth();

  const fetchCart = async () => {
    if (!isAuthenticated) return;
    
    try {
      setIsLoading(true);
      const cartData = await cartService.getCart();
      setCart(cartData);
    } catch (error) {
      setError('Failed to fetch cart data');
      console.error('Fetch cart error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch cart when authenticated
  useEffect(() => {
    if (isAuthenticated) {
      fetchCart();
    } else {
      setCart([]);
    }
  }, [isAuthenticated]);

  const addToCart = async (productId, quantity = 1) => {
    try {
      setIsLoading(true);
      await cartService.addToCart(productId, quantity);
      await fetchCart(); // Refresh cart after adding
      return true;
    } catch (error) {
      setError('Failed to add item to cart');
      console.error('Add to cart error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const updateCartItem = async (cartProductId, quantity) => {
    try {
      setIsLoading(true);
      await cartService.updateCartItem(cartProductId, quantity);
      await fetchCart(); // Refresh cart after updating
      return true;
    } catch (error) {
      setError('Failed to update cart item');
      console.error('Update cart item error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const removeCartItem = async (cartProductId) => {
    try {
      setIsLoading(true);
      await cartService.removeCartItem(cartProductId);
      await fetchCart(); // Refresh cart after removing
      return true;
    } catch (error) {
      setError('Failed to remove cart item');
      console.error('Remove cart item error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const clearCart = async () => {
    try {
      setIsLoading(true);
      await cartService.clearCart();
      setCart([]);
      return true;
    } catch (error) {
      setError('Failed to clear cart');
      console.error('Clear cart error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const getCartTotal = () => {
    return cart.reduce((total, item) => {
      const price = item.product.discountPrice || item.product.price;
      return total + (price * item.quantity);
    }, 0);
  };

  const getCartCount = () => {
    return cart.reduce((count, item) => count + item.quantity, 0);
  };

  const getSelectedItems = (selectedIds = []) => {
    if (!selectedIds.length) return [];
    return cart.filter(item => selectedIds.includes(item.id));
  };

  const getSelectedTotal = (selectedIds = []) => {
    if (!selectedIds.length) return 0;
    return getSelectedItems(selectedIds).reduce((total, item) => {
      const price = item.product.discountPrice || item.product.price;
      return total + (price * item.quantity);
    }, 0);
  };

  const value = {
    cart,
    isLoading,
    error,
    fetchCart,
    addToCart,
    updateCartItem,
    removeCartItem,
    clearCart,
    getCartTotal,
    getCartCount,
    getSelectedItems,
    getSelectedTotal
  };

  return (
    <CartContext.Provider value={value}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = () => {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within a CartProvider');
  }
  return context;
};

export default CartContext; 

/* ===== src\contexts\index.js ===== */
import { AuthProvider, useAuth } from './AuthContext';
import { CartProvider, useCart } from './CartContext';
import { NotificationProvider, useNotification } from './NotificationContext';

export {
    AuthProvider, CartProvider, NotificationProvider, useAuth, useCart, useNotification
};

const AppProviders = ({ children }) => (<AuthProvider>
    {children}
</AuthProvider>);

export default AppProviders

/* ===== src\contexts\NotificationContext.js ===== */
import React, { createContext, useContext, useEffect, useState } from 'react';
import { notificationService } from '../services';
import { useAuth } from './AuthContext';

const NotificationContext = createContext(null);

export const NotificationProvider = ({ children }) => {
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const { isAuthenticated } = useAuth();

  const fetchNotifications = async (params = {}) => {
    if (!isAuthenticated) return;
    
    try {
      setIsLoading(true);
      const response = await notificationService.getNotifications(params);
      setNotifications(response.content || []);
      return response;
    } catch (error) {
      setError('Failed to fetch notifications');
      console.error('Fetch notifications error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchUnreadCount = async () => {
    if (!isAuthenticated) return;
    
    try {
      const count = await notificationService.getUnreadCount();
      setUnreadCount(count);
      return count;
    } catch (error) {
      console.error('Fetch unread count error:', error);
    }
  };

  // Fetch notifications and unread count when authenticated
  useEffect(() => {
    if (isAuthenticated) {
      fetchNotifications();
      fetchUnreadCount();
    } else {
      setNotifications([]);
      setUnreadCount(0);
    }
  }, [isAuthenticated]);

  const markAsRead = async (notificationId) => {
    try {
      setIsLoading(true);
      await notificationService.markAsRead(notificationId);
      
      // Update local state
      setNotifications(prev => 
        prev.map(notification => 
          notification.id === notificationId 
            ? { ...notification, isRead: true } 
            : notification
        )
      );
      
      setUnreadCount(prev => Math.max(0, prev - 1));
      return true;
    } catch (error) {
      setError('Failed to mark notification as read');
      console.error('Mark as read error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const markAllAsRead = async () => {
    try {
      setIsLoading(true);
      await notificationService.markAllAsRead();
      
      // Update local state
      setNotifications(prev => 
        prev.map(notification => ({ ...notification, isRead: true }))
      );
      
      setUnreadCount(0);
      return true;
    } catch (error) {
      setError('Failed to mark all notifications as read');
      console.error('Mark all as read error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const deleteNotification = async (notificationId) => {
    try {
      setIsLoading(true);
      await notificationService.deleteNotification(notificationId);
      
      // Update local state
      const deletedNotification = notifications.find(n => n.id === notificationId);
      setNotifications(prev => prev.filter(n => n.id !== notificationId));
      
      // Update unread count if the deleted notification was unread
      if (deletedNotification && !deletedNotification.isRead) {
        setUnreadCount(prev => Math.max(0, prev - 1));
      }
      
      return true;
    } catch (error) {
      setError('Failed to delete notification');
      console.error('Delete notification error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const deleteAllNotifications = async () => {
    try {
      setIsLoading(true);
      await notificationService.deleteAllNotifications();
      
      // Update local state
      setNotifications([]);
      setUnreadCount(0);
      return true;
    } catch (error) {
      setError('Failed to delete all notifications');
      console.error('Delete all notifications error:', error);
      return false;
    } finally {
      setIsLoading(false);
    }
  };

  const value = {
    notifications,
    unreadCount,
    isLoading,
    error,
    fetchNotifications,
    fetchUnreadCount,
    markAsRead,
    markAllAsRead,
    deleteNotification,
    deleteAllNotifications
  };

  return (
    <NotificationContext.Provider value={value}>
      {children}
    </NotificationContext.Provider>
  );
};

export const useNotification = () => {
  const context = useContext(NotificationContext);
  if (!context) {
    throw new Error('useNotification must be used within a NotificationProvider');
  }
  return context;
};

export default NotificationContext; 

/* ===== src\screens\account\AccountScreen.jsx ===== */
// src/screens/account/AccountScreen.jsx
import { Feather, Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { Alert, Image, SafeAreaView, ScrollView, Text, TouchableOpacity, View } from 'react-native';
// Giả sử bạn có context hoặc service để lấy thông tin user và logout
// import { useAuth } from '@/contexts'; // Ví dụ nếu bạn dùng AuthContext

// --- DỮ LIỆU GIẢ ---
const fakeUser = {
    fullName: 'Nguyễn Văn An',
    email: 'nguyen.van.an@example.com',
    profileImageUrl: `https://picsum.photos/seed/user_avatar_${Date.now()}/200/200`, // Ảnh ngẫu nhiên mới mỗi lần
    joinDate: new Date(2023, 0, 15), // 15 tháng 1, 2023
};
// --- KẾT THÚC DỮ LIỆU GIẢ ---

const OptionItem = ({ iconName, iconType = "MaterialCommunityIcons", title, onPress, isDestructive = false }) => {
    const IconComponent = iconType === "Ionicons" ? Ionicons : (iconType === "Feather" ? Feather : MaterialCommunityIcons);
    return (
        <TouchableOpacity
            onPress={onPress}
            className="flex-row items-center bg-white p-4 border-b border-gray-100 active:bg-gray-50"
        >
            <IconComponent name={iconName} size={22} color={isDestructive ? "#EF4444" : "#4B5563"} />
            <Text className={`flex-1 ml-4 text-base ${isDestructive ? 'text-red-600' : 'text-gray-700'}`}>
                {title}
            </Text>
            {!isDestructive && <Ionicons name="chevron-forward-outline" size={20} color="#9CA3AF" />}
        </TouchableOpacity>
    );
};

function AccountScreen() {
    const router = useRouter();
    const [user, setUser] = useState(fakeUser);
    // const { logout } = useAuth(); // Ví dụ nếu bạn dùng AuthContext

    const handleEditProfile = () => {
        Alert.alert("Thông báo", "Chức năng chỉnh sửa thông tin cá nhân sẽ sớm được cập nhật.");
        // router.push('/(app)/account/edit-profile'); // Điều hướng đến màn hình chỉnh sửa
    };

    const handleOrderHistory = () => {
        Alert.alert("Thông báo", "Chức năng lịch sử đơn hàng sẽ sớm được cập nhật.");
        // router.push('/(app)/account/order-history');
    };

    const handleShippingAddresses = () => {
        Alert.alert("Thông báo", "Chức năng quản lý địa chỉ giao hàng sẽ sớm được cập nhật.");
        // router.push('/(app)/account/addresses');
    };

    const handleChangePassword = () => {
        Alert.alert("Thông báo", "Chức năng đổi mật khẩu sẽ sớm được cập nhật.");
        // router.push('/(auth)/reset-password', { fromAccount: true }); // Hoặc một flow đổi mật khẩu riêng
    };

    const handleNotificationSettings = () => {
        // Màn hình Notification đã có, có thể điều hướng tới đó hoặc một màn hình cài đặt riêng
        router.push('/(app)/notification');
    };

    const handleHelpCenter = () => {
        Alert.alert("Thông báo", "Chức năng trung tâm trợ giúp sẽ sớm được cập nhật.");
    };

    const handleAboutApp = () => {
        Alert.alert("BookStore App", "Phiên bản 1.0.0\n© 2025 BookStore Inc.");
    };

    const handleTermsAndPolicies = () => {
        Alert.alert("Thông báo", "Chức năng chính sách & điều khoản sẽ sớm được cập nhật.");
    };


    const handleLogout = () => {
        Alert.alert(
            "Xác nhận Đăng xuất",
            "Bạn có chắc chắn muốn đăng xuất khỏi tài khoản này?",
            [
                { text: "Hủy", style: "cancel" },
                {
                    text: "Đăng xuất",
                    onPress: async () => {
                        // await logout(); // Gọi hàm logout từ context/service
                        console.log("Người dùng đã đăng xuất (giả lập)");
                        // Sau khi logout, Expo Router thường sẽ tự động điều hướng về (auth)/login
                        // nếu AuthContext được thiết lập đúng cách để theo dõi trạng thái isAuthenticated.
                        // Nếu không, bạn cần điều hướng thủ công:
                        router.replace('/(auth)/login');
                    },
                    style: "destructive"
                }
            ]
        );
    };

    const accountOptions = [
        { title: "Chỉnh sửa thông tin cá nhân", iconName: "account-edit-outline", onPress: handleEditProfile },
        { title: "Lịch sử đơn hàng", iconName: "history", onPress: handleOrderHistory },
        { title: "Địa chỉ giao hàng", iconName: "map-marker-outline", onPress: handleShippingAddresses },
        { title: "Đổi mật khẩu", iconName: "lock-reset", onPress: handleChangePassword },
        { title: "Cài đặt thông báo", iconName: "bell-outline", onPress: handleNotificationSettings },
    ];

    const supportOptions = [
        { title: "Trung tâm trợ giúp", iconName: "help-circle-outline", onPress: handleHelpCenter },
        { title: "Về ứng dụng", iconName: "information-outline", onPress: handleAboutApp },
        { title: "Chính sách & Điều khoản", iconName: "shield-check-outline", onPress: handleTermsAndPolicies },
    ];


    return (
        <SafeAreaView className="flex-1 bg-slate-100">
            <ScrollView showsVerticalScrollIndicator={false}>
                {/* User Info Section */}
                <View className="bg-sky-500 p-6 pt-10 items-center">
                    <TouchableOpacity onPress={() => Alert.alert("Thay đổi ảnh đại diện", "Chức năng này sẽ sớm được cập nhật.")}>
                        <Image
                            source={{ uri: user.profileImageUrl }}
                            className="w-24 h-24 rounded-full border-4 border-sky-400"
                        />
                    </TouchableOpacity>
                    <Text className="text-2xl font-bold text-white mt-3">{user.fullName}</Text>
                    <Text className="text-sm text-sky-100 mt-1">{user.email}</Text>
                </View>

                {/* Account Options Section */}
                <View className="mt-5">
                    <Text className="text-xs font-semibold text-gray-500 uppercase px-4 pb-1">Tài khoản</Text>
                    <View className="bg-white rounded-lg shadow-sm mx-2 overflow-hidden">
                        {accountOptions.map((item, index) => (
                            <OptionItem
                                key={index}
                                iconName={item.iconName}
                                title={item.title}
                                onPress={item.onPress}
                            />
                        ))}
                    </View>
                </View>

                {/* Support Options Section */}
                <View className="mt-5">
                    <Text className="text-xs font-semibold text-gray-500 uppercase px-4 pb-1">Hỗ trợ & Pháp lý</Text>
                    <View className="bg-white rounded-lg shadow-sm mx-2 overflow-hidden">
                        {supportOptions.map((item, index) => (
                            <OptionItem
                                key={index}
                                iconName={item.iconName}
                                title={item.title}
                                onPress={item.onPress}
                            />
                        ))}
                    </View>
                </View>

                {/* Logout Button */}
                <View className="mt-6 mb-8 mx-2">
                    <View className="bg-white rounded-lg shadow-sm overflow-hidden">
                        <OptionItem
                            iconName="log-out"
                            iconType="Feather"
                            title="Đăng xuất"
                            onPress={handleLogout}
                            isDestructive
                        />
                    </View>
                </View>
            </ScrollView>
        </SafeAreaView>
    );
}

export default AccountScreen;

/* ===== src\screens\auth\ForgotPasswordScreen.jsx ===== */
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { ActivityIndicator, KeyboardAvoidingView, Platform, SafeAreaView, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';

function ForgotPasswordScreen() {
    const router = useRouter();
    const [username, setUsername] = useState('');
    const [otp, setOtp] = useState('');
    const [isOtpSent, setIsOtpSent] = useState(false);
    const [isLoading, setIsLoading] = useState(false); // For simulated API calls

    const handleSendOtp = async () => {
        if (!username) {
            alert("Vui lòng nhập tên đăng nhập.");
            return;
        }
        setIsLoading(true);
        // Giả lập gọi API gửi OTP
        console.log('Gửi OTP cho:', username);
        await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay
        setIsLoading(false);
        setIsOtpSent(true);
        // Trong thực tế, bạn sẽ gọi API ở đây
        // Nếu thành công thì setIsOtpSent(true)
        // Nếu thất bại, hiển thị lỗi
    };

    const handleVerifyOtp = async () => {
        if (!otp) {
            alert("Vui lòng nhập mã OTP.");
            return;
        }
        setIsLoading(true);
        // Giả lập xác thực OTP
        console.log('Xác thực OTP:', otp);
        await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay
        setIsLoading(false);
        // Trong thực tế, nếu OTP đúng:
        router.push({ pathname: '/(auth)/reset-password', params: { username } }); // Truyền username để ResetPasswordScreen biết
        // Nếu OTP sai, hiển thị lỗi
    };

    const handleResendOtp = async () => {
        setIsLoading(true);
        console.log('Gửi lại OTP cho:', username);
        await new Promise(resolve => setTimeout(resolve, 1500));
        setIsLoading(false);
        alert("Mã OTP mới đã được gửi (giả lập).");
    };

    return (
        <SafeAreaView className="flex-1 bg-slate-50">
            <KeyboardAvoidingView
                behavior={Platform.OS === "ios" ? "padding" : "height"}
                className="flex-1"
            >
                <ScrollView
                    contentContainerStyle={{ flexGrow: 1, justifyContent: 'center' }}
                    className="px-6"
                    keyboardShouldPersistTaps="handled"
                >
                    <View className="items-center mb-10">
                        <MaterialCommunityIcons name="lock-question" size={80} color="#0EA5E9" />
                        <Text className="text-3xl font-bold text-sky-600 mt-4">
                            {isOtpSent ? "Nhập Mã Xác Thực" : "Quên Mật Khẩu"}
                        </Text>
                        <Text className="text-gray-600 mt-2 text-center px-4">
                            {isOtpSent
                                ? `Một mã OTP đã được gửi đến email liên kết với tài khoản '${username}'.`
                                : "Nhập tên đăng nhập của bạn để nhận mã xác thực."}
                        </Text>
                    </View>

                    {!isOtpSent ? (
                        <>
                            {/* Username Input */}
                            <View className="mb-5">
                                <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Tên đăng nhập</Text>
                                <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                                    <Ionicons name="person-outline" size={20} color="#6B7280" className="mr-2" />
                                    <TextInput
                                        className="flex-1 text-base text-gray-800"
                                        placeholder="Nhập tên đăng nhập"
                                        placeholderTextColor="#9CA3AF"
                                        value={username}
                                        onChangeText={setUsername}
                                        autoCapitalize="none"
                                    />
                                </View>
                            </View>

                            <TouchableOpacity
                                onPress={handleSendOtp}
                                disabled={isLoading}
                                className={`py-4 rounded-lg shadow-md mb-6 ${isLoading ? 'bg-sky-300' : 'bg-sky-500 active:bg-sky-600'}`}
                            >
                                {isLoading ? (
                                    <ActivityIndicator color="#FFFFFF" />
                                ) : (
                                    <Text className="text-white text-center text-lg font-semibold">Gửi Mã Xác Thực</Text>
                                )}
                            </TouchableOpacity>
                        </>
                    ) : (
                        <>
                            {/* OTP Input */}
                            <View className="mb-5">
                                <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Mã OTP</Text>
                                <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                                    <MaterialCommunityIcons name="numeric" size={20} color="#6B7280" className="mr-2" />
                                    <TextInput
                                        className="flex-1 text-base text-gray-800"
                                        placeholder="Nhập mã OTP"
                                        placeholderTextColor="#9CA3AF"
                                        value={otp}
                                        onChangeText={setOtp}
                                        keyboardType="number-pad"
                                        maxLength={6}
                                    />
                                </View>
                            </View>

                            <TouchableOpacity
                                onPress={handleVerifyOtp}
                                disabled={isLoading}
                                className={`py-4 rounded-lg shadow-md mb-4 ${isLoading ? 'bg-sky-300' : 'bg-sky-500 active:bg-sky-600'}`}
                            >
                                {isLoading ? (
                                    <ActivityIndicator color="#FFFFFF" />
                                ) : (
                                    <Text className="text-white text-center text-lg font-semibold">Xác Nhận</Text>
                                )}
                            </TouchableOpacity>

                            <TouchableOpacity onPress={handleResendOtp} disabled={isLoading} className="mb-6">
                                <Text className="text-sky-600 text-center text-sm font-medium">
                                    {isLoading ? 'Đang gửi...' : 'Gửi lại mã OTP'}
                                </Text>
                            </TouchableOpacity>
                        </>
                    )}

                    <TouchableOpacity onPress={() => router.back()} className="mt-4">
                        <Text className="text-gray-600 text-center text-sm">Quay lại Đăng nhập</Text>
                    </TouchableOpacity>
                </ScrollView>
            </KeyboardAvoidingView>
        </SafeAreaView>
    );
}

export default ForgotPasswordScreen;

/* ===== src\screens\auth\LoginScreen.jsx ===== */
// src/screens/auth/LoginScreen.jsx
import { useAuth } from '@/contexts/AuthContext'; // Import useAuth
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { ActivityIndicator, KeyboardAvoidingView, Platform, SafeAreaView, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';

function LoginScreen() {
    const router = useRouter();
    const { login } = useAuth(); // Lấy hàm login từ context
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [isLoading, setIsLoading] = useState(false); // State cho loading
    const [error, setError] = useState(''); // State cho thông báo lỗi

    const handleLogin = async () => {
        if (!username.trim() || !password.trim()) {
            setError("Tên đăng nhập và mật khẩu không được để trống.");
            return;
        }
        setError(''); // Xóa lỗi cũ
        setIsLoading(true);
        try {
            const response = await login(username, password);
            // AuthProvider sẽ tự động điều hướng nếu login thành công
            // response ở đây là ApiResponse từ backend (thông qua identityService và AuthProvider)
            console.log('Login response in screen:', response);
            if (response && response.status === 200 && response.result && response.result.authenticated) {
                // Đăng nhập thành công, AuthProvider sẽ xử lý điều hướng
                // Không cần router.replace ở đây nữa
            } else {
                // Xử lý trường hợp API trả về success nhưng không authenticated, hoặc message lỗi cụ thể
                setError(response?.message || "Đăng nhập thất bại. Vui lòng thử lại.");
            }
        } catch (err) {
            // Lỗi đã được console.error trong service hoặc AuthProvider
            // err ở đây là lỗi đã được xử lý (ví dụ: data từ error.response)
            setError(err?.message || "Đã có lỗi xảy ra. Vui lòng thử lại.");
        } finally {
            setIsLoading(false);
        }
    };

    const navigateToForgotPassword = () => {
        router.push('/(auth)/forgot-password');
    };

    const navigateToRegister = () => {
        router.push('/(auth)/register');
    };

    return (
        <SafeAreaView className="flex-1 bg-slate-50">
            <KeyboardAvoidingView
                behavior={Platform.OS === "ios" ? "padding" : "height"}
                className="flex-1"
            >
                <ScrollView
                    contentContainerStyle={{ flexGrow: 1, justifyContent: 'center' }}
                    className="px-6"
                    keyboardShouldPersistTaps="handled"
                >
                    <View className="items-center mb-10">
                        <MaterialCommunityIcons name="book-open-page-variant-outline" size={80} color="#0EA5E9" />
                        <Text className="text-4xl font-bold text-sky-600 mt-4">BookStore</Text>
                        <Text className="text-2xl font-semibold text-gray-700 mt-2">Đăng Nhập</Text>
                    </View>

                    {error ? (
                        <View className="bg-red-100 border border-red-400 p-3 rounded-md mb-4">
                            <Text className="text-red-700 text-center">{error}</Text>
                        </View>
                    ) : null}

                    {/* Username Input */}
                    <View className="mb-5">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Tên đăng nhập</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3 focus-within:border-sky-500 focus-within:ring-1 focus-within:ring-sky-500">
                            <Ionicons name="person-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập tên đăng nhập"
                                placeholderTextColor="#9CA3AF"
                                value={username}
                                onChangeText={setUsername}
                                autoCapitalize="none"
                                keyboardType="default"
                                editable={!isLoading}
                            />
                        </View>
                    </View>

                    {/* Password Input */}
                    <View className="mb-6">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Mật khẩu</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3 focus-within:border-sky-500 focus-within:ring-1 focus-within:ring-sky-500">
                            <Ionicons name="lock-closed-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập mật khẩu"
                                placeholderTextColor="#9CA3AF"
                                value={password}
                                onChangeText={setPassword}
                                secureTextEntry={!showPassword}
                                editable={!isLoading}
                            />
                            <TouchableOpacity onPress={() => setShowPassword(!showPassword)} disabled={isLoading}>
                                <Ionicons name={showPassword ? "eye-off-outline" : "eye-outline"} size={24} color="#6B7280" />
                            </TouchableOpacity>
                        </View>
                    </View>

                    <TouchableOpacity
                        onPress={handleLogin}
                        disabled={isLoading}
                        className={`py-4 rounded-lg shadow-md mb-4 ${isLoading ? 'bg-sky-300' : 'bg-sky-500 active:bg-sky-600'}`}
                    >
                        {isLoading ? (
                            <ActivityIndicator color="#FFFFFF" />
                        ) : (
                            <Text className="text-white text-center text-lg font-semibold">Đăng Nhập</Text>
                        )}
                    </TouchableOpacity>

                    <TouchableOpacity onPress={navigateToForgotPassword} disabled={isLoading} className="mb-6">
                        <Text className="text-sky-600 text-center text-sm font-medium">Quên mật khẩu?</Text>
                    </TouchableOpacity>

                    <View className="flex-row justify-center items-center">
                        <Text className="text-gray-600 text-sm">Chưa có tài khoản? </Text>
                        <TouchableOpacity onPress={navigateToRegister} disabled={isLoading}>
                            <Text className="text-sky-600 font-semibold text-sm">Đăng ký ngay</Text>
                        </TouchableOpacity>
                    </View>
                </ScrollView>
            </KeyboardAvoidingView>
        </SafeAreaView>
    );
}

export default LoginScreen;


/* ===== src\screens\auth\RegisterScreen.jsx ===== */
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useState } from 'react';
import { KeyboardAvoidingView, Platform, SafeAreaView, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';

function RegisterScreen() {
    const router = useRouter();
    const [username, setUsername] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [showPassword, setShowPassword] = useState(false);
    const [showConfirmPassword, setShowConfirmPassword] = useState(false);

    const handleRegister = () => {
        // Logic đăng ký sẽ được thêm ở đây
        if (password !== confirmPassword) {
            alert("Mật khẩu xác nhận không khớp!");
            return;
        }
        console.log('Đăng ký với:', username, email, password);
        // Sau khi đăng ký thành công (giả lập):
        // router.replace('/(auth)/login');
    };

    const navigateToLogin = () => {
        router.replace('/(auth)/login');
    };

    return (
        <SafeAreaView className="flex-1 bg-slate-50">
            <KeyboardAvoidingView
                behavior={Platform.OS === "ios" ? "padding" : "height"}
                className="flex-1"
            >
                <ScrollView
                    contentContainerStyle={{ flexGrow: 1, justifyContent: 'center' }}
                    className="px-6"
                    keyboardShouldPersistTaps="handled"
                >
                    <View className="items-center mb-8">
                        <MaterialCommunityIcons name="account-plus-outline" size={80} color="#0EA5E9" />
                        <Text className="text-3xl font-bold text-sky-600 mt-4">Tạo Tài Khoản</Text>
                    </View>

                    {/* Username Input */}
                    <View className="mb-4">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Tên đăng nhập</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                            <Ionicons name="person-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập tên đăng nhập"
                                placeholderTextColor="#9CA3AF"
                                value={username}
                                onChangeText={setUsername}
                                autoCapitalize="none"
                            />
                        </View>
                    </View>

                    {/* Email Input */}
                    <View className="mb-4">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Email</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                            <Ionicons name="mail-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập địa chỉ email"
                                placeholderTextColor="#9CA3AF"
                                value={email}
                                onChangeText={setEmail}
                                keyboardType="email-address"
                                autoCapitalize="none"
                            />
                        </View>
                    </View>

                    {/* Password Input */}
                    <View className="mb-4">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Mật khẩu</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                            <Ionicons name="lock-closed-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập mật khẩu"
                                placeholderTextColor="#9CA3AF"
                                value={password}
                                onChangeText={setPassword}
                                secureTextEntry={!showPassword}
                            />
                            <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
                                <Ionicons name={showPassword ? "eye-off-outline" : "eye-outline"} size={24} color="#6B7280" />
                            </TouchableOpacity>
                        </View>
                    </View>

                    {/* Confirm Password Input */}
                    <View className="mb-6">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Xác nhận mật khẩu</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                            <Ionicons name="lock-closed-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập lại mật khẩu"
                                placeholderTextColor="#9CA3AF"
                                value={confirmPassword}
                                onChangeText={setConfirmPassword}
                                secureTextEntry={!showConfirmPassword}
                            />
                            <TouchableOpacity onPress={() => setShowConfirmPassword(!showConfirmPassword)}>
                                <Ionicons name={showConfirmPassword ? "eye-off-outline" : "eye-outline"} size={24} color="#6B7280" />
                            </TouchableOpacity>
                        </View>
                    </View>

                    <TouchableOpacity
                        onPress={handleRegister}
                        className="bg-sky-500 py-4 rounded-lg shadow-md active:bg-sky-600 mb-6"
                    >
                        <Text className="text-white text-center text-lg font-semibold">Đăng Ký</Text>
                    </TouchableOpacity>

                    <View className="flex-row justify-center items-center">
                        <Text className="text-gray-600 text-sm">Đã có tài khoản? </Text>
                        <TouchableOpacity onPress={navigateToLogin}>
                            <Text className="text-sky-600 font-semibold text-sm">Đăng nhập</Text>
                        </TouchableOpacity>
                    </View>
                </ScrollView>
            </KeyboardAvoidingView>
        </SafeAreaView>
    );
}

export default RegisterScreen;

/* ===== src\screens\auth\ResetPasswordScreen.jsx ===== */
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useState } from 'react';
import { ActivityIndicator, KeyboardAvoidingView, Platform, SafeAreaView, ScrollView, Text, TextInput, TouchableOpacity, View } from 'react-native';

function ResetPasswordScreen() {
    const router = useRouter();
    const params = useLocalSearchParams(); // Để lấy username nếu cần hiển thị
    const { username } = params;

    const [newPassword, setNewPassword] = useState('');
    const [confirmNewPassword, setConfirmNewPassword] = useState('');
    const [showNewPassword, setShowNewPassword] = useState(false);
    const [showConfirmNewPassword, setShowConfirmNewPassword] = useState(false);
    const [isLoading, setIsLoading] = useState(false);

    const handleResetPassword = async () => {
        if (!newPassword || !confirmNewPassword) {
            alert("Vui lòng nhập đầy đủ thông tin.");
            return;
        }
        if (newPassword !== confirmNewPassword) {
            alert("Mật khẩu mới và xác nhận mật khẩu không khớp.");
            return;
        }
        // Giả sử độ dài mật khẩu tối thiểu là 6
        if (newPassword.length < 6) {
            alert("Mật khẩu mới phải có ít nhất 6 ký tự.");
            return;
        }

        setIsLoading(true);
        // Giả lập API đổi mật khẩu
        console.log('Đổi mật khẩu cho', username, 'mật khẩu mới:', newPassword);
        await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate network delay
        setIsLoading(false);

        // Sau khi đổi mật khẩu thành công
        alert("Đổi mật khẩu thành công!");
        router.replace('/(auth)/login');
    };

    return (
        <SafeAreaView className="flex-1 bg-slate-50">
            <KeyboardAvoidingView
                behavior={Platform.OS === "ios" ? "padding" : "height"}
                className="flex-1"
            >
                <ScrollView
                    contentContainerStyle={{ flexGrow: 1, justifyContent: 'center' }}
                    className="px-6"
                    keyboardShouldPersistTaps="handled"
                >
                    <View className="items-center mb-10">
                        <MaterialCommunityIcons name="lock-reset" size={80} color="#0EA5E9" />
                        <Text className="text-3xl font-bold text-sky-600 mt-4">Đặt Lại Mật Khẩu</Text>
                        {username && (
                            <Text className="text-gray-600 mt-2 text-center">
                                Đặt lại mật khẩu cho tài khoản: <Text className="font-semibold">{username}</Text>
                            </Text>
                        )}
                    </View>

                    {/* New Password Input */}
                    <View className="mb-4">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Mật khẩu mới</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                            <Ionicons name="lock-closed-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập mật khẩu mới"
                                placeholderTextColor="#9CA3AF"
                                value={newPassword}
                                onChangeText={setNewPassword}
                                secureTextEntry={!showNewPassword}
                            />
                            <TouchableOpacity onPress={() => setShowNewPassword(!showNewPassword)}>
                                <Ionicons name={showNewPassword ? "eye-off-outline" : "eye-outline"} size={24} color="#6B7280" />
                            </TouchableOpacity>
                        </View>
                    </View>

                    {/* Confirm New Password Input */}
                    <View className="mb-6">
                        <Text className="text-sm font-medium text-gray-600 mb-1 ml-1">Xác nhận mật khẩu mới</Text>
                        <View className="flex-row items-center bg-white border border-gray-300 rounded-lg p-3">
                            <Ionicons name="lock-closed-outline" size={20} color="#6B7280" className="mr-2" />
                            <TextInput
                                className="flex-1 text-base text-gray-800"
                                placeholder="Nhập lại mật khẩu mới"
                                placeholderTextColor="#9CA3AF"
                                value={confirmNewPassword}
                                onChangeText={setConfirmNewPassword}
                                secureTextEntry={!showConfirmNewPassword}
                            />
                            <TouchableOpacity onPress={() => setShowConfirmNewPassword(!showConfirmNewPassword)}>
                                <Ionicons name={showConfirmNewPassword ? "eye-off-outline" : "eye-outline"} size={24} color="#6B7280" />
                            </TouchableOpacity>
                        </View>
                    </View>

                    <TouchableOpacity
                        onPress={handleResetPassword}
                        disabled={isLoading}
                        className={`py-4 rounded-lg shadow-md mb-6 ${isLoading ? 'bg-sky-300' : 'bg-sky-500 active:bg-sky-600'}`}
                    >
                        {isLoading ? (
                            <ActivityIndicator color="#FFFFFF" />
                        ) : (
                            <Text className="text-white text-center text-lg font-semibold">Đổi Mật Khẩu</Text>
                        )}
                    </TouchableOpacity>

                </ScrollView>
            </KeyboardAvoidingView>
        </SafeAreaView>
    );
}

export default ResetPasswordScreen;

/* ===== src\screens\blog\BlogDetailScreen.jsx ===== */
import React, {useEffect, useState} from 'react';
import {View, Text, ScrollView, ActivityIndicator, Share, Platform, Image} from 'react-native';
import {MaterialCommunityIcons, Ionicons} from '@expo/vector-icons';
import {useLocalSearchParams, Stack, useRouter} from 'expo-router';
import {TouchableOpacity} from 'react-native-gesture-handler'; // For share button

// --- DỮ LIỆU GIẢ --- (Copy hàm generateDetailedFakeBlogs, allFakeBlogs và getBlogBySlugOrId vào đây hoặc import)
const generateDetailedFakeBlogs = (count = 15) => {
    const blogs = [];
    const titles = ["10 Cuốn Sách Nên Đọc Trong Hè Này", "Tìm Hiểu Về Tiểu Thuyết Hiện Đại", "Cách Rèn Luyện Thói Quen Đọc Sách Mỗi Ngày", "Những Tác Giả Trẻ Triển Vọng Của Năm", "Phân Tích Sâu Về Tác Phẩm 'Số Đỏ'", "Lịch Sử Phát Triển Của Thơ Ca Việt Nam", "Review Sách: Nhà Giả Kim - Hành Trình Tâm Linh", "Xu Hướng Đọc Sách Của Giới Trẻ Hiện Nay"];
    const authors = ["Nguyễn Văn An", "Trần Thị Mai", "Lê Minh Trí", "Phạm Thuỳ Dương", "Bookworm Admin"];
    const categories = [{id: "cat_vanhoc", name: "Văn Học"}, {
        id: "cat_kynang", name: "Kỹ Năng Sống"
    }, {id: "cat_doisong", name: "Đời Sống"}, {id: "cat_kinhte", name: "Kinh Tế"}, {
        id: "cat_thieunhi", name: "Thiếu Nhi"
    },];
    const baseContentParagraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n";

    for (let i = 0; i < count; i++) {
        const publishedDate = new Date(Date.now() - Math.floor(Math.random() * 90 * 24 * 60 * 60 * 1000)); // Random date in last 90 days
        const numParagraphs = Math.floor(Math.random() * 5) + 3; // 3 to 7 paragraphs
        let fullContent = `Mở đầu cho bài viết "${titles[i % titles.length]}".\n\n`;
        for (let j = 0; j < numParagraphs; j++) {
            fullContent += `Đây là đoạn văn thứ ${j + 1} của bài viết. ` + baseContentParagraph;
        }
        fullContent += "Kết thúc bài viết. Cảm ơn bạn đã đọc!";

        blogs.push({
            blog_id: `blog_post_${i + 1}`,
            slug: `${titles[i % titles.length].toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '')}-${i + 1}`,
            title: titles[i % titles.length] + (count > titles.length ? ` (Phần ${Math.floor(i / titles.length) + 1})` : ''),
            content: fullContent,
            thumbnail_url: `https://picsum.photos/seed/blogthumb${i + Math.floor(Math.random() * 1000)}/400/250`,
            large_image_url: `https://picsum.photos/seed/bloglarge${i + Math.floor(Math.random() * 1000)}/800/400`,
            category: categories[i % categories.length],
            author_name: authors[i % authors.length],
            published_at: publishedDate.toISOString(),
            view_count: Math.floor(Math.random() * 10000) + 200,
            excerpt: "Khám phá những phân tích sâu sắc và các mẹo hữu ích trong bài viết này. " + baseContentParagraph.substring(0, 120) + "...",
        });
    }
    return blogs;
};
const allFakeBlogs = generateDetailedFakeBlogs(15);
const getBlogBySlugOrId = (identifier) => {
    return allFakeBlogs.find(blog => blog.slug === identifier || blog.blog_id === identifier);
};

// --- KẾT THÚC DỮ LIỆU GIẢ ---

function BlogDetailScreen() {
    const params = useLocalSearchParams();
    // param 'id' này sẽ nhận giá trị slug từ URL (ví dụ: /blog/ten-bai-viet-slug)
    // vì file route là app/(app)/blog/[id].js
    const {id: blogIdentifier} = params;
    const [blog, setBlog] = useState(null);
    const [loading, setLoading] = useState(true);
    const router = useRouter();

    useEffect(() => {
        if (blogIdentifier) {
            const foundBlog = getBlogBySlugOrId(blogIdentifier);
            setBlog(foundBlog);
        }
        setLoading(false);
    }, [blogIdentifier]);

    const handleShare = async () => {
        if (!blog) return;
        try {
            const result = await Share.share({
                message: `Đọc bài viết thú vị này: ${blog.title} | BookStore App`,
                url: `https://your-app-domain.com/blog/${blog.slug}`, // Thay bằng URL thực của bạn
                title: blog.title,
            });
            if (result.action === Share.sharedAction) {
                if (result.activityType) {
                    console.log('Shared with activity type:', result.activityType);
                } else {
                    console.log('Shared');
                }
            } else if (result.action === Share.dismissedAction) {
                console.log('Share dismissed');
            }
        } catch (error) {
            console.error('Error sharing:', error.message);
        }
    };


    if (loading) {
        return (<View className="flex-1 justify-center items-center bg-white">
            <ActivityIndicator size="large" color="#0EA5E9"/>
        </View>);
    }

    if (!blog) {
        return (<View className="flex-1 justify-center items-center bg-slate-50 p-6">
            <Stack.Screen options={{title: 'Không tìm thấy'}}/>
            <MaterialCommunityIcons name="text-box-remove-outline" size={72} color="#94A3B8"/>
            <Text className="text-2xl font-semibold text-gray-700 mt-5">Không tìm thấy bài viết</Text>
            <Text className="text-gray-500 mt-2.5 text-center">
                Bài viết bạn đang tìm không còn tồn tại hoặc đường dẫn đã bị thay đổi.
            </Text>
            <TouchableOpacity
                onPress={() => router.back()}
                className="mt-6 bg-sky-500 px-6 py-3 rounded-lg shadow active:bg-sky-600"
            >
                <Text className="text-white font-semibold">Quay lại</Text>
            </TouchableOpacity>
        </View>);
    }

    const publishedDate = new Date(blog.published_at);
    const formattedDate = `${publishedDate.getDate()} tháng ${publishedDate.getMonth() + 1}, ${publishedDate.getFullYear()}`;

    return (<ScrollView className="flex-1 bg-white">
        <Image
            source={{uri: blog.large_image_url || blog.thumbnail_url}}
            className="w-full h-72"
            contentFit="cover"
            placeholder={{uri: 'https://via.placeholder.com/800x400/e0e0e0/999999?text=Blog+Image'}}
            transition={300}
        />

        <View className="p-5 lg:p-8">
            {/* Category Badge */}
            <View className="mb-4">
                <Text
                    className="text-sm text-sky-600 font-semibold bg-sky-100 px-3.5 py-1.5 rounded-full self-start uppercase tracking-wider">
                    {blog.category.name}
                </Text>
            </View>

            {/* Title */}
            <Text
                className="text-3xl lg:text-4xl font-extrabold text-gray-900 leading-tight mb-3">{blog.title}</Text>

            {/* Author and Date Info */}
            <View className="flex-row flex-wrap items-center my-4 text-gray-600 space-x-2 sm:space-x-5">
                <View className="flex-row items-center mb-2 sm:mb-0">
                    <MaterialCommunityIcons name="account-circle-outline" size={18} color="#4B5563"/>
                    <Text className="text-sm text-gray-700 ml-1.5">{blog.author_name}</Text>
                </View>
                <View className="flex-row items-center mb-2 sm:mb-0">
                    <MaterialCommunityIcons name="calendar-month-outline" size={18} color="#4B5563"/>
                    <Text className="text-sm text-gray-700 ml-1.5">{formattedDate}</Text>
                </View>
                <View className="flex-row items-center mb-2 sm:mb-0">
                    <Ionicons name="eye-outline" size={18} color="#4B5563"/>
                    <Text className="text-sm text-gray-700 ml-1.5">{blog.view_count.toLocaleString()} lượt
                        xem</Text>
                </View>
            </View>

            {/* Content Separator */}
            <View className="border-b border-gray-200 my-6"/>

            {/* Content */}
            <Text className="text-lg text-justify text-gray-800 leading-relaxed whitespace-pre-line">
                {blog.content}
            </Text>

            {/* Tags Example (nếu có) */}
            <View className="mt-8 pt-6 border-t border-gray-200">
                <Text className="text-base font-semibold text-gray-500 mb-3">CHỦ ĐỀ LIÊN QUAN:</Text>
                <View className="flex-row flex-wrap">
                    {[blog.category.name, "Sách Hay", "Review"].map(tag => (
                        <View key={tag} className="bg-gray-100 rounded-full px-4 py-1.5 mr-2 mb-2 shadow-sm">
                            <Text className="text-xs text-gray-700 font-medium">{tag.toUpperCase()}</Text>
                        </View>))}
                </View>
            </View>

            {/* Comments Section Placeholder */}
            <View className="mt-10 pt-8 border-t border-gray-200">
                <Text className="text-2xl font-bold text-gray-800 mb-5">Bình luận
                    ({Math.floor(Math.random() * 20)})</Text>
                <View className="bg-slate-100 p-6 rounded-lg shadow">
                    <Text className="text-gray-500 text-center">
                        Tính năng bình luận hiện đang được phát triển. Vui lòng quay lại sau!
                    </Text>
                </View>
            </View>
        </View>
    </ScrollView>);
}

export default BlogDetailScreen;

/* ===== src\screens\blog\BlogScreen.jsx ===== */
import React from 'react';
import {View, Text, FlatList, TouchableOpacity, Image} from 'react-native';
import {MaterialCommunityIcons} from '@expo/vector-icons';
import {useRouter} from 'expo-router';

// --- DỮ LIỆU GIẢ --- (Copy hàm generateDetailedFakeBlogs và allFakeBlogs vào đây hoặc import từ file chung)
const generateDetailedFakeBlogs = (count = 15) => {
    const blogs = [];
    const titles = ["10 Cuốn Sách Nên Đọc Trong Hè Này", "Tìm Hiểu Về Tiểu Thuyết Hiện Đại", "Cách Rèn Luyện Thói Quen Đọc Sách Mỗi Ngày", "Những Tác Giả Trẻ Triển Vọng Của Năm", "Phân Tích Sâu Về Tác Phẩm 'Số Đỏ'", "Lịch Sử Phát Triển Của Thơ Ca Việt Nam", "Review Sách: Nhà Giả Kim - Hành Trình Tâm Linh", "Xu Hướng Đọc Sách Của Giới Trẻ Hiện Nay"];
    const authors = ["Nguyễn Văn An", "Trần Thị Mai", "Lê Minh Trí", "Phạm Thuỳ Dương", "Bookworm Admin"];
    const categories = [{id: "cat_vanhoc", name: "Văn Học"}, {
        id: "cat_kynang",
        name: "Kỹ Năng Sống"
    }, {id: "cat_doisong", name: "Đời Sống"}, {id: "cat_kinhte", name: "Kinh Tế"}, {
        id: "cat_thieunhi",
        name: "Thiếu Nhi"
    },];
    const baseContentParagraph = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n";

    for (let i = 0; i < count; i++) {
        const publishedDate = new Date(Date.now() - Math.floor(Math.random() * 90 * 24 * 60 * 60 * 1000)); // Random date in last 90 days
        const numParagraphs = Math.floor(Math.random() * 5) + 3; // 3 to 7 paragraphs
        let fullContent = `Mở đầu cho bài viết "${titles[i % titles.length]}".\n\n`;
        for (let j = 0; j < numParagraphs; j++) {
            fullContent += `Đây là đoạn văn thứ ${j + 1} của bài viết. ` + baseContentParagraph;
        }
        fullContent += "Kết thúc bài viết. Cảm ơn bạn đã đọc!";

        blogs.push({
            blog_id: `blog_post_${i + 1}`,
            slug: `${titles[i % titles.length].toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '')}-${i + 1}`,
            title: titles[i % titles.length] + (count > titles.length ? ` (Phần ${Math.floor(i / titles.length) + 1})` : ''),
            content: fullContent,
            thumbnail_url: `https://picsum.photos/seed/blogthumb${i + Math.floor(Math.random() * 1000)}/400/250`,
            large_image_url: `https://picsum.photos/seed/bloglarge${i + Math.floor(Math.random() * 1000)}/800/400`,
            category: categories[i % categories.length],
            author_name: authors[i % authors.length],
            published_at: publishedDate.toISOString(),
            view_count: Math.floor(Math.random() * 10000) + 200,
            excerpt: "Khám phá những phân tích sâu sắc và các mẹo hữu ích trong bài viết này. " + baseContentParagraph.substring(0, 120) + "...",
        });
    }
    return blogs;
};
const allFakeBlogs = generateDetailedFakeBlogs(15);
// --- KẾT THÚC DỮ LIỆU GIẢ ---

const BlogListItem = ({blog, onPress}) => {
    const publishedDate = new Date(blog.published_at);
    const formattedDate = `${publishedDate.getDate()}/${publishedDate.getMonth() + 1}/${publishedDate.getFullYear()}`;

    return (<TouchableOpacity
        onPress={onPress}
        className="bg-white rounded-xl shadow-lg overflow-hidden mx-4 my-3 active:opacity-80"
    >
        <Image
            source={{uri: blog.thumbnail_url}}
            className="w-full h-52" // Tăng chiều cao ảnh thumbnail
            contentFit="cover"
            placeholder={{uri: 'https://via.placeholder.com/400x250/e0e0e0/999999?text=Blog'}}
            transition={300}
        />
        <View className="p-4">
            <Text
                className="text-xs text-blue-700 font-semibold uppercase tracking-wide">{blog.category.name}</Text>
            <Text className="text-xl font-bold text-gray-800 mt-1.5 leading-tight"
                  numberOfLines={2}>{blog.title}</Text>
            <Text className="text-sm text-gray-600 mt-2" numberOfLines={3}>{blog.excerpt}</Text>
            <View className="flex-row justify-between items-center mt-4 pt-3 border-t border-gray-200">
                <View className="flex-row items-center">
                    <MaterialCommunityIcons name="account-edit-outline" size={16} color="#4B5563"/>
                    <Text className="text-xs text-gray-700 ml-1.5 font-medium">{blog.author_name}</Text>
                </View>
                <View className="flex-row items-center">
                    <MaterialCommunityIcons name="calendar-clock-outline" size={16} color="#4B5563"/>
                    <Text className="text-xs text-gray-700 ml-1.5">{formattedDate}</Text>
                </View>
            </View>
        </View>
    </TouchableOpacity>);
};

function BlogScreen() {
    const router = useRouter();

    const handleBlogPostPress = (blog) => {
        // Điều hướng đến BlogDetailScreen với slug của bài blog
        // File app/(app)/blog/[id].js sẽ nhận slug này như một param tên là 'id'
        router.push(`/blog/${blog.slug}`);
    };

    return (<View className="flex-1 bg-slate-100">
        {/* Header title được đặt trong app/(app)/blog/_layout.js */}
        <FlatList
            data={allFakeBlogs}
            renderItem={({item}) => (<BlogListItem
                blog={item}
                onPress={() => handleBlogPostPress(item)}
            />)}
            keyExtractor={item => item.blog_id}
            contentContainerStyle={{paddingVertical: 12}} // Thêm padding trên và dưới
            // ListHeaderComponent={ // Tiêu đề "Tin tức & Bài viết" đã có từ _layout.js
            //     <Text className="text-2xl font-bold text-gray-800 px-4 pt-4 pb-2">Tin tức & Bài viết</Text>
            // }
        />
    </View>);
}

export default BlogScreen;

/* ===== src\screens\cart\CartScreen.jsx ===== */
// src/screens/cart/CartScreen.jsx
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useCallback, useMemo, useState } from 'react';
import { Alert, FlatList, Image, SafeAreaView, Text, TouchableOpacity, View } from 'react-native';

// --- DỮ LIỆU GIẢ ---
// Sử dụng lại hàm generateFakeProducts từ ProductScreen để có dữ liệu sản phẩm
const generateFakeProducts = (count = 5) => { // Tạo ít sản phẩm hơn cho giỏ hàng
    const products = [];
    const bookTitles = [
        "Lập Trình Với NodeJS", "React Native Cho Người Mới Bắt Đầu", "Kiến Trúc Microservices",
        "Thiết Kế Hướng Dữ Liệu", "Giải Thuật Và Cấu Trúc Dữ Liệu",
    ];
    const authors = ["Nguyễn Văn Coder", "Trần Thị Dev", "Lê Minh Engineer", "Phạm Thuật Toán Gia", "Hoàng Hệ Thống"];

    for (let i = 0; i < count; i++) {
        const original_price = Math.floor(Math.random() * 300 + 80) * 1000; // 80k - 380k
        const discount_percent = Math.random() < 0.7 ? Math.random() * 0.30 + 0.05 : 0; // 5-35% discount
        const sale_price = Math.floor(original_price * (1 - discount_percent) / 1000) * 1000;
        products.push({
            product_id: `cartprod_${Date.now()}_${i + 1}`,
            title: bookTitles[i % bookTitles.length] + (count > bookTitles.length ? ` Edition ${Math.floor(i / bookTitles.length) + 1}` : ''),
            author: authors[i % authors.length],
            thumbnail_url: `https://picsum.photos/seed/cartthumb${i + 1}/200/300`,
            sale_price: sale_price,
            original_price: original_price,
            quantity_in_stock: Math.floor(Math.random() * 20) + 1, // Đảm bảo luôn có hàng
        });
    }
    return products;
};

const fakeProductsForCart = generateFakeProducts(3); // Tạo 3 sản phẩm cho giỏ hàng ban đầu

const initialFakeCartItems = fakeProductsForCart.map((product, index) => ({
    id: `cartitem_${product.product_id}`, // ID của mục trong giỏ hàng
    product: product,
    quantity: Math.floor(Math.random() * 2) + 1, // Số lượng từ 1 đến 3
}));
// --- KẾT THÚC DỮ LIỆU GIẢ ---

function CartScreen() {
    const router = useRouter();
    const [cartItems, setCartItems] = useState(initialFakeCartItems);
    const [selectedItems, setSelectedItems] = useState(() => new Set(cartItems.map(item => item.id))); // Chọn tất cả ban đầu

    const handleUpdateQuantity = useCallback((itemId, newQuantity) => {
        if (newQuantity <= 0) { // Nếu số lượng <= 0, xóa sản phẩm
            handleRemoveItem(itemId);
            return;
        }
        setCartItems(prevItems =>
            prevItems.map(item =>
                item.id === itemId
                    ? { ...item, quantity: Math.min(newQuantity, item.product.quantity_in_stock) } // Giới hạn bởi số lượng tồn kho
                    : item
            )
        );
    }, []);

    const handleRemoveItem = useCallback((itemId) => {
        Alert.alert(
            "Xóa sản phẩm",
            "Bạn có chắc muốn xóa sản phẩm này khỏi giỏ hàng?",
            [
                { text: "Hủy", style: "cancel" },
                {
                    text: "Xóa",
                    onPress: () => {
                        setCartItems(prevItems => prevItems.filter(item => item.id !== itemId));
                        setSelectedItems(prevSelected => {
                            const newSelected = new Set(prevSelected);
                            newSelected.delete(itemId);
                            return newSelected;
                        });
                    },
                    style: "destructive"
                }
            ]
        );
    }, []);

    const handleToggleSelectItem = useCallback((itemId) => {
        setSelectedItems(prevSelected => {
            const newSelected = new Set(prevSelected);
            if (newSelected.has(itemId)) {
                newSelected.delete(itemId);
            } else {
                newSelected.add(itemId);
            }
            return newSelected;
        });
    }, []);

    const handleToggleSelectAll = () => {
        if (selectedItems.size === cartItems.length) {
            setSelectedItems(new Set()); // Bỏ chọn tất cả
        } else {
            setSelectedItems(new Set(cartItems.map(item => item.id))); // Chọn tất cả
        }
    };

    const subtotal = useMemo(() => {
        return cartItems.reduce((sum, item) => {
            if (selectedItems.has(item.id)) {
                return sum + item.product.sale_price * item.quantity;
            }
            return sum;
        }, 0);
    }, [cartItems, selectedItems]);

    const totalSelectedCount = useMemo(() => {
        return cartItems.reduce((count, item) => {
            if (selectedItems.has(item.id)) {
                return count + item.quantity;
            }
            return count;
        }, 0);
    }, [cartItems, selectedItems]);


    const handleCheckout = () => {
        if (selectedItems.size === 0) {
            Alert.alert("Giỏ hàng trống", "Vui lòng chọn ít nhất một sản phẩm để thanh toán.");
            return;
        }
        // Logic điều hướng đến trang thanh toán với các sản phẩm đã chọn
        const itemsToCheckout = cartItems.filter(item => selectedItems.has(item.id));
        console.log("Tiến hành thanh toán với các sản phẩm:", itemsToCheckout);
        router.push({ pathname: '/(app)/checkout', params: { subtotalAmount: subtotal } }); // Truyền tổng tiền tạm thời
    };

    const CartItem = React.memo(({ item, isSelected, onToggleSelect, onUpdateQuantity, onRemove }) => (
        <View className="bg-white p-3 mb-3 rounded-lg shadow flex-row items-center">
            {/* Checkbox */}
            <TouchableOpacity onPress={onToggleSelect} className="p-2 mr-2">
                <MaterialCommunityIcons
                    name={isSelected ? "checkbox-marked-outline" : "checkbox-blank-outline"}
                    size={26}
                    color={isSelected ? "#0EA5E9" : "#6B7280"}
                />
            </TouchableOpacity>

            {/* Product Image */}
            <Image source={{ uri: item.product.thumbnail_url }} className="w-20 h-28 rounded-md mr-3" resizeMode="cover" />

            {/* Product Details */}
            <View className="flex-1 space-y-1">
                <Text className="text-sm font-semibold text-gray-800" numberOfLines={2}>{item.product.title}</Text>
                <Text className="text-xs text-gray-500">Tác giả: {item.product.author}</Text>
                <Text className="text-sm font-bold text-sky-600">{item.product.sale_price.toLocaleString('vi-VN')}₫</Text>
                {item.product.original_price > item.product.sale_price && (
                    <Text className="text-xs text-gray-400 line-through">
                        {item.product.original_price.toLocaleString('vi-VN')}₫
                    </Text>
                )}

                {/* Quantity Selector */}
                <View className="flex-row items-center mt-1">
                    <TouchableOpacity
                        onPress={() => onUpdateQuantity(item.id, item.quantity - 1)}
                        className="p-1.5 border border-gray-300 rounded-l-md active:bg-gray-100"
                    >
                        <Ionicons name="remove" size={18} color="#4B5563" />
                    </TouchableOpacity>
                    <Text className="px-3 py-1 border-t border-b border-gray-300 text-sm font-medium text-gray-700">
                        {item.quantity}
                    </Text>
                    <TouchableOpacity
                        onPress={() => onUpdateQuantity(item.id, item.quantity + 1)}
                        disabled={item.quantity >= item.product.quantity_in_stock}
                        className={`p-1.5 border border-gray-300 rounded-r-md ${item.quantity >= item.product.quantity_in_stock ? 'bg-gray-100' : 'active:bg-gray-100'}`}
                    >
                        <Ionicons name="add" size={18} color={item.quantity >= item.product.quantity_in_stock ? "#9CA3AF" : "#4B5563"} />
                    </TouchableOpacity>
                </View>
            </View>

            {/* Remove Button */}
            <TouchableOpacity onPress={() => onRemove(item.id)} className="p-2 ml-2 self-start">
                <Ionicons name="trash-outline" size={22} color="#EF4444" />
            </TouchableOpacity>
        </View>
    ));


    if (cartItems.length === 0) {
        return (
            <SafeAreaView className="flex-1 bg-slate-100 justify-center items-center p-5">
                <MaterialCommunityIcons name="cart-off" size={80} color="#CBD5E1" />
                <Text className="text-xl font-semibold text-gray-500 mt-4">Giỏ hàng của bạn đang trống</Text>
                <Text className="text-gray-400 mt-1 text-center mb-6">
                    Hãy khám phá và thêm những cuốn sách yêu thích vào giỏ nhé!
                </Text>
                <TouchableOpacity
                    onPress={() => router.push('/(app)/product/')} // Điều hướng đến trang sản phẩm
                    className="bg-sky-500 px-6 py-3 rounded-lg shadow-md active:bg-sky-600"
                >
                    <Text className="text-white font-semibold text-base">Tiếp tục mua sắm</Text>
                </TouchableOpacity>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView className="flex-1 bg-slate-100">
            {/* Select All / Header Actions */}
            <View className="px-4 py-3 bg-white border-b border-gray-200 flex-row justify-between items-center">
                <TouchableOpacity onPress={handleToggleSelectAll} className="flex-row items-center">
                    <MaterialCommunityIcons
                        name={selectedItems.size === cartItems.length && cartItems.length > 0 ? "checkbox-multiple-marked-outline" : "checkbox-multiple-blank-outline"}
                        size={24}
                        color={selectedItems.size === cartItems.length && cartItems.length > 0 ? "#0EA5E9" : "#6B7280"}
                    />
                    <Text className="ml-2 text-sm text-gray-700">
                        {selectedItems.size === cartItems.length && cartItems.length > 0 ? "Bỏ chọn tất cả" : "Chọn tất cả"} ({cartItems.length} sản phẩm)
                    </Text>
                </TouchableOpacity>
                {/* Có thể thêm nút "Xóa mục đã chọn" ở đây nếu cần */}
            </View>

            <FlatList
                data={cartItems}
                renderItem={({ item }) => (
                    <CartItem
                        item={item}
                        isSelected={selectedItems.has(item.id)}
                        onToggleSelect={() => handleToggleSelectItem(item.id)}
                        onUpdateQuantity={handleUpdateQuantity}
                        onRemove={handleRemoveItem}
                    />
                )}
                keyExtractor={item => item.id}
                contentContainerStyle={{ paddingHorizontal: 10, paddingTop: 10, paddingBottom: 100 }} // Padding cho bottom bar
                showsVerticalScrollIndicator={false}
            />

            {/* Bottom Summary and Checkout Bar */}
            <View className="absolute bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-3 shadow-top">
                <View className="flex-row justify-between items-center mb-2">
                    <Text className="text-sm text-gray-600">Tạm tính ({totalSelectedCount} sản phẩm):</Text>
                    <Text className="text-lg font-bold text-sky-600">
                        {subtotal.toLocaleString('vi-VN')}₫
                    </Text>
                </View>
                <TouchableOpacity
                    onPress={handleCheckout}
                    disabled={selectedItems.size === 0}
                    className={`py-3.5 rounded-lg shadow ${selectedItems.size > 0 ? 'bg-sky-500 active:bg-sky-600' : 'bg-gray-300'}`}
                >
                    <Text className="text-white text-center text-base font-semibold">
                        Tiến hành thanh toán
                    </Text>
                </TouchableOpacity>
            </View>
        </SafeAreaView>
    );
}

// Thêm shadow-top vào tailwind.config.js nếu chưa có, hoặc sử dụng StyleSheet
// Ví dụ cho StyleSheet nếu không tùy chỉnh Tailwind:
// const styles = StyleSheet.create({
//     shadowTop: {
//         shadowColor: "#000",
//         shadowOffset: {
//             width: 0,
//             height: -3, // Shadow ở phía trên
//         },
//         shadowOpacity: 0.1,
//         shadowRadius: 3,
//         elevation: 5,
//     }
// });
// và dùng <View style={[styles.shadowTop, {position: 'absolute', ...}]}>

export default CartScreen;

/* ===== src\screens\checkout\CheckoutScreen.jsx ===== */
import React from 'react';
import {Text, View} from "react-native";

function CheckoutScreen() {
    return (<View>
        <Text>Checkout Screen</Text>
    </View>);
}

export default CheckoutScreen;

/* ===== src\screens\home\HomeScreen.jsx ===== */
import { FontAwesome, MaterialCommunityIcons } from '@expo/vector-icons';
import React from 'react';
import { FlatList, Image, ScrollView, Text, TouchableOpacity, View } from 'react-native';

// --- DỮ LIỆU GIẢ ---
// Trong ứng dụng thực tế, bạn sẽ fetch dữ liệu này từ API
const generateFakeProducts = (count = 10) => {
    const products = [];
    const bookTitles = ["Cuốn Theo Chiều Gió", "Nhà Giả Kim", "Đắc Nhân Tâm", "Harry Potter và Hòn Đá Phù Thủy", "Bố Già", "Rừng Na Uy", "Hoàng Tử Bé", "Tôi Thấy Hoa Vàng Trên Cỏ Xanh"];
    const authors = ["Margaret Mitchell", "Paulo Coelho", "Dale Carnegie", "J.K. Rowling", "Mario Puzo", "Haruki Murakami", "Antoine de Saint-Exupéry", "Nguyễn Nhật Ánh"];
    for (let i = 0; i < count; i++) {
        const original_price = Math.floor(Math.random() * 300 + 50) * 1000; // Giá từ 50k đến 350k
        const discount_percent = Math.random() < 0.7 ? Math.random() * 0.4 + 0.1 : 0; // 10-50% discount, 70% chance
        const sale_price = Math.floor(original_price * (1 - discount_percent) / 1000) * 1000;
        products.push({
            product_id: `book_${i + 1}`,
            title: bookTitles[i % bookTitles.length] + (count > bookTitles.length ? ` Tập ${Math.floor(i / bookTitles.length) + 1}` : ''),
            author: authors[i % authors.length],
            thumbnail_url: `https://picsum.photos/seed/book${i + Math.floor(Math.random() * 1000)}/200/300`, // Random seed for variety
            sale_price: sale_price,
            original_price: original_price,
            average_rating: parseFloat((Math.random() * 1.5 + 3.5).toFixed(1)), // Rating 3.5 - 5.0
            quantity_in_stock: Math.floor(Math.random() * 100),
        });
    }
    return products;
};

const generateFakeCategories = (count = 5) => {
    const categories = [];
    const names = ["Văn Học", "Kinh Tế", "Kỹ Năng Sống", "Thiếu Nhi", "Sách Nước Ngoài", "Lịch Sử"];
    const icons = ["book-open-page-variant", "finance", "account-heart", "human-child", "translate", "bank"];
    for (let i = 0; i < count; i++) {
        categories.push({
            category_id: `cat_${i + 1}`, name: names[i % names.length], icon: icons[i % icons.length], // Thêm icon cho danh mục
        });
    }
    return categories;
};

const generateFakeBlogs = (count = 3) => {
    const blogs = [];
    const titles = ["10 Cuốn Sách Nên Đọc Trong Hè Này", "Tìm Hiểu Về Tiểu Thuyết Hiện Đại", "Cách Rèn Luyện Thói Quen Đọc Sách Mỗi Ngày", "Những Tác Giả Trẻ Triển Vọng Của Năm",];
    for (let i = 0; i < count; i++) {
        blogs.push({
            blog_id: `blog_${i + 1}`,
            title: titles[i % titles.length],
            thumbnail_url: `https://picsum.photos/200`,
            excerpt: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua...",
        });
    }
    return blogs;
};

const fakeProducts = generateFakeProducts(10);
const fakeCategories = generateFakeCategories(5);
const fakeBlogs = generateFakeBlogs(3);
// --- KẾT THÚC DỮ LIỆU GIẢ ---

const StarRating = ({ rating, size = 14 }) => {
    const fullStars = Math.floor(rating);
    const halfStar = rating % 1 >= 0.5;
    const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
    return (<View className="flex-row items-center">
        {[...Array(fullStars)].map((_, i) => <FontAwesome key={`full_${i}`} name="star" size={size}
            color="#FFC107" />)}
        {halfStar && <FontAwesome name="star-half-empty" size={size} color="#FFC107" />}
        {[...Array(emptyStars)].map((_, i) => <FontAwesome key={`empty_${i}`} name="star-o" size={size}
            color="#FFC107" />)}
        <Text className="text-xs text-gray-600 ml-1">{rating.toFixed(1)}</Text>
    </View>);
};

const ProductCard = ({ product }) => {
    return (<TouchableOpacity className="bg-white rounded-lg shadow-md p-3 m-2 w-40 overflow-hidden">
        <Image
            source={{ uri: product.thumbnail_url }}
            className="w-full h-48 rounded-md"
            contentFit="cover"
            placeholder={{ uri: 'https://picsum.photos/200' }}
            transition={300}
        />
        <Text className="text-sm font-semibold mt-2 text-gray-800" numberOfLines={2}>{product.title}</Text>
        <Text className="text-xs text-gray-500 mt-0.5" numberOfLines={1}>{product.author}</Text>
        <View className="mt-1">
            <Text className="text-sm font-bold text-blue-600">
                {product.sale_price.toLocaleString('vi-VN')}₫
            </Text>
            {product.original_price > product.sale_price && (<Text className="text-xs text-gray-400 line-through">
                {product.original_price.toLocaleString('vi-VN')}₫
            </Text>)}
        </View>
        <View className="mt-1">
            <StarRating rating={product.average_rating} />
        </View>
    </TouchableOpacity>);
};

const CategoryChip = ({ category, onPress }) => {
    return (<TouchableOpacity
        onPress={onPress}
        className="bg-sky-100 rounded-lg p-3 m-1.5 items-center w-24 h-24 justify-center shadow"
    >
        <MaterialCommunityIcons name={category.icon || "tag"} size={28} color="#0369A1" />
        <Text className="text-xs text-sky-700 font-medium mt-1.5 text-center"
            numberOfLines={2}>{category.name}</Text>
    </TouchableOpacity>);
};

const BlogPostItem = ({ post, onPress }) => {
    return (<TouchableOpacity
        onPress={onPress}
        className="bg-white rounded-lg shadow p-3 mx-4 mb-3 flex-row items-start"
    >
        <Image
            source={{ uri: post.thumbnail_url }}
            className="w-24 h-24 rounded-md mr-3"
            contentFit="cover"
            placeholder={{ uri: 'https://picsum.photos/200' }}
            transition={300}
        />
        <View className="flex-1">
            <Text className="text-md font-semibold text-gray-800" numberOfLines={2}>{post.title}</Text>
            <Text className="text-xs text-gray-600 mt-1" numberOfLines={3}>{post.excerpt}</Text>
            <Text className="text-xs text-blue-600 mt-1.5 font-medium">Đọc thêm</Text>
        </View>
    </TouchableOpacity>);
};

const PromotionalBanner = ({ title, subtitle, imageUrl, ctaText, onPress }) => {
    return (
        <TouchableOpacity onPress={onPress} className="mx-4 my-4 rounded-xl overflow-hidden shadow-lg aspect-[16/7]">
            <Image source={{ uri: imageUrl }} className="absolute inset-0 w-full h-full" contentFit="cover" />
            <View className="absolute inset-0 bg-black/40 p-4 flex justify-end">
                <Text className="text-white text-xl font-bold shadow-black" style={{
                    textShadowColor: 'rgba(0, 0, 0, 0.75)', textShadowOffset: { width: 0, height: 1 }, textShadowRadius: 2
                }}>{title}</Text>
                <Text className="text-gray-200 text-sm mt-0.5 shadow-black" style={{
                    textShadowColor: 'rgba(0, 0, 0, 0.75)', textShadowOffset: { width: 0, height: 1 }, textShadowRadius: 2
                }}>{subtitle}</Text>
                {ctaText && (<View className="mt-2 self-start bg-white/90 px-3 py-1.5 rounded-md shadow">
                    <Text className="text-blue-700 font-semibold text-xs">{ctaText}</Text>
                </View>)}
            </View>
        </TouchableOpacity>);
};


function HomeScreen() {
    // Hàm xử lý khi nhấn vào một item, bạn có thể điều hướng ở đây
    const handleProductPress = (product) => console.log("Pressed product:", product.title);
    const handleCategoryPress = (category) => console.log("Pressed category:", category.name);
    const handleBlogPostPress = (post) => console.log("Pressed blog post:", post.title);
    const handleBannerPress = () => console.log("Banner pressed");

    return (<ScrollView className="flex-1 bg-slate-50">
        {/* Welcome Section */}
        <View className="p-5 bg-sky-600">
            <Text className="text-2xl font-bold text-white">Chào mừng trở lại!</Text>
            <Text className="text-sm text-sky-100 mt-1">Khám phá những cuốn sách yêu thích của bạn.</Text>
        </View>

        {/* Promotional Banner Section */}
        <PromotionalBanner
            title="Ưu Đãi Mùa Hè!"
            subtitle="Giảm giá đến 50% cho hàng ngàn đầu sách."
            imageUrl="https://picsum.photos/seed/summerbooks/800/350"
            ctaText="Xem Ngay"
            onPress={handleBannerPress}
        />

        {/* Featured Products Section */}
        <View className="my-3">
            <View className="flex-row justify-between items-center px-4 mb-1">
                <Text className="text-xl font-semibold text-gray-800">Sách Mới Nhất</Text>
                <TouchableOpacity onPress={() => console.log("View all new products")}>
                    <Text className="text-sm text-blue-600 font-medium">Xem tất cả</Text>
                </TouchableOpacity>
            </View>
            <FlatList
                data={fakeProducts.slice(0, 6)}
                renderItem={({ item }) => <ProductCard product={item} />}
                keyExtractor={item => item.product_id}
                horizontal
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={{ paddingHorizontal: 10, paddingVertical: 8 }}
            />
        </View>

        {/* Categories Section */}
        <View className="my-3">
            <View className="flex-row justify-between items-center px-4 mb-1">
                <Text className="text-xl font-semibold text-gray-800">Danh Mục Nổi Bật</Text>
                <TouchableOpacity onPress={() => console.log("View all categories")}>
                    <Text className="text-sm text-blue-600 font-medium">Xem tất cả</Text>
                </TouchableOpacity>
            </View>
            <FlatList
                data={fakeCategories}
                renderItem={({ item }) => <CategoryChip category={item} onPress={() => handleCategoryPress(item)} />}
                keyExtractor={item => item.category_id}
                horizontal
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={{ paddingHorizontal: 10, paddingVertical: 8 }}
            />
        </View>

        {/* Best Sellers Section (Ví dụ thêm) */}
        <View className="my-3">
            <View className="flex-row justify-between items-center px-4 mb-1">
                <Text className="text-xl font-semibold text-gray-800">Sách Bán Chạy</Text>
                <TouchableOpacity onPress={() => console.log("View all best sellers")}>
                    <Text className="text-sm text-blue-600 font-medium">Xem tất cả</Text>
                </TouchableOpacity>
            </View>
            <FlatList
                data={[...fakeProducts].sort((a, b) => b.average_rating - a.average_rating).slice(0, 6)} // Sắp xếp theo rating
                renderItem={({ item }) => <ProductCard product={item} />}
                keyExtractor={item => `bestseller_${item.product_id}`}
                horizontal
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={{ paddingHorizontal: 10, paddingVertical: 8 }}
            />
        </View>


        {/* Latest Blog Posts Section */}
        <View className="my-3 pb-4">
            <View className="flex-row justify-between items-center px-4 mb-2">
                <Text className="text-xl font-semibold text-gray-800">Tin Tức & Bài Viết</Text>
                <TouchableOpacity onPress={() => console.log("View all blog posts")}>
                    <Text className="text-sm text-blue-600 font-medium">Xem tất cả</Text>
                </TouchableOpacity>
            </View>
            {fakeBlogs.map(post => (
                <BlogPostItem key={post.blog_id} post={post} onPress={() => handleBlogPostPress(post)} />))}
        </View>
    </ScrollView>);
}

export default HomeScreen;


/* ===== src\screens\notification\NotificationScreen.jsx ===== */
// src/screens/notification/NotificationScreen.jsx
import { Ionicons, MaterialCommunityIcons } from '@expo/vector-icons';
import React, { useCallback, useState } from 'react';
import { Alert, FlatList, SafeAreaView, Text, TouchableOpacity, View } from 'react-native';

// Dữ liệu giả cho thông báo
const initialFakeNotifications = [
    {
        id: '1',
        title: 'Đơn hàng #BK001256 đã giao thành công!',
        message: 'Cảm ơn bạn đã mua sắm tại BookStore. Đơn hàng của bạn đã được giao đến địa chỉ指定.',
        timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000), // 1 giờ trước
        isRead: false,
        type: 'order_success',
        iconName: 'cart-check',
        iconColor: '#4CAF50', // Green
    },
    {
        id: '2',
        title: 'Flash Sale Sách Kỹ Năng - Giảm đến 40%!',
        message: 'Đừng bỏ lỡ cơ hội sở hữu những cuốn sách kỹ năng hay nhất với giá ưu đãi. Thời gian có hạn!',
        timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000), // 5 giờ trước
        isRead: true,
        type: 'promotion',
        iconName: 'sale',
        iconColor: '#FF9800', // Orange
    },
    {
        id: '3',
        title: 'Cập nhật chính sách bảo mật',
        message: 'Chúng tôi đã cập nhật chính sách bảo mật để phục vụ bạn tốt hơn. Vui lòng xem chi tiết.',
        timestamp: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 ngày trước
        isRead: false,
        type: 'system_update',
        iconName: 'shield-check-outline',
        iconColor: '#2196F3', // Blue
    },
    {
        id: '4',
        title: 'Bạn có tin nhắn mới từ bộ phận hỗ trợ',
        message: 'Về yêu cầu #HT00987 của bạn, chúng tôi đã có phản hồi. Vui lòng kiểm tra mục tin nhắn.',
        timestamp: new Date(Date.now() - 2 * 24 * 60 * 60 * 1000), // 2 ngày trước
        isRead: true,
        type: 'new_message',
        iconName: 'message-text-outline',
        iconColor: '#03A9F4', // Light Blue
    },
    {
        id: '5',
        title: 'Sản phẩm bạn yêu thích đã có hàng lại!',
        message: 'Sách "Tư Duy Nhanh và Chậm" bạn đã lưu vào danh sách yêu thích hiện đã có hàng trở lại.',
        timestamp: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 ngày trước
        isRead: false,
        type: 'product_alert',
        iconName: 'bell-ring-outline',
        iconColor: '#795548', // Brown
    },
];

// Hàm định dạng thời gian (ví dụ: 1 giờ trước, 5 phút trước, 1 ngày trước)
const timeAgo = (date) => {
    const seconds = Math.floor((new Date() - date) / 1000);
    let interval = seconds / 31536000;
    if (interval > 1) return Math.floor(interval) + " năm trước";
    interval = seconds / 2592000;
    if (interval > 1) return Math.floor(interval) + " tháng trước";
    interval = seconds / 86400;
    if (interval > 1) return Math.floor(interval) + " ngày trước";
    interval = seconds / 3600;
    if (interval > 1) return Math.floor(interval) + " giờ trước";
    interval = seconds / 60;
    if (interval > 1) return Math.floor(interval) + " phút trước";
    return Math.floor(seconds) + " giây trước";
};


function NotificationScreen() {
    const [notifications, setNotifications] = useState(initialFakeNotifications);
    // const router = useRouter(); // Nếu cần điều hướng

    const handleNotificationPress = useCallback((item) => {
        // Đánh dấu là đã đọc
        setNotifications(prevNotifications =>
            prevNotifications.map(notif =>
                notif.id === item.id ? { ...notif, isRead: true } : notif
            )
        );
        // Có thể điều hướng đến chi tiết thông báo hoặc màn hình liên quan
        // Ví dụ: if (item.type === 'order_success') router.push(`/orders/${item.orderId}`);
        Alert.alert("Thông báo", `Đã mở thông báo: ${item.title}`);
    }, []);

    const markAllAsRead = () => {
        setNotifications(prevNotifications =>
            prevNotifications.map(notif => ({ ...notif, isRead: true }))
        );
    };

    const clearAllNotifications = () => {
        Alert.alert(
            "Xác nhận",
            "Bạn có chắc chắn muốn xóa tất cả thông báo không?",
            [
                { text: "Hủy", style: "cancel" },
                { text: "Xóa", onPress: () => setNotifications([]), style: "destructive" }
            ]
        );
    };

    const NotificationItem = React.memo(({ item }) => (
        <TouchableOpacity
            onPress={() => handleNotificationPress(item)}
            className={`p-4 border-b border-gray-200 flex-row items-start ${!item.isRead ? 'bg-sky-50' : 'bg-white'}`}
        >
            <View className="mr-4 mt-1">
                <MaterialCommunityIcons name={item.iconName || "bell-outline"} size={28} color={item.iconColor || "#6B7280"} />
                {!item.isRead && (
                    <View className="absolute top-0 right-0 w-2.5 h-2.5 bg-red-500 rounded-full" />
                )}
            </View>
            <View className="flex-1">
                <Text className={`text-base font-semibold ${!item.isRead ? 'text-gray-900' : 'text-gray-700'}`}>{item.title}</Text>
                <Text className="text-sm text-gray-600 mt-0.5" numberOfLines={2}>{item.message}</Text>
                <Text className="text-xs text-gray-400 mt-1.5">{timeAgo(item.timestamp)}</Text>
            </View>
            {!item.isRead && <View className="w-1.5 h-1.5 bg-sky-500 rounded-full self-center ml-2" />}
        </TouchableOpacity>
    ));


    return (
        <SafeAreaView className="flex-1 bg-gray-100">
            {/* Header đã được định nghĩa trong _layout.js, ở đây có thể thêm các actions chung */}
            <View className="px-4 py-3 flex-row justify-end items-center border-b border-gray-200 bg-white">
                {notifications.some(n => !n.isRead) && (
                    <TouchableOpacity onPress={markAllAsRead} className="mr-4">
                        <Text className="text-sky-600 font-medium">Đánh dấu tất cả đã đọc</Text>
                    </TouchableOpacity>
                )}
                {notifications.length > 0 && (
                    <TouchableOpacity onPress={clearAllNotifications}>
                        <Text className="text-red-500 font-medium">Xóa tất cả</Text>
                    </TouchableOpacity>
                )}
            </View>

            {notifications.length === 0 ? (
                <View className="flex-1 justify-center items-center p-5">
                    <Ionicons name="notifications-off-outline" size={80} color="#CBD5E1" />
                    <Text className="text-xl font-semibold text-gray-500 mt-4">Không có thông báo</Text>
                    <Text className="text-gray-400 mt-1 text-center">
                        Tất cả các thông báo của bạn sẽ xuất hiện ở đây.
                    </Text>
                </View>
            ) : (
                <FlatList
                    data={notifications}
                    renderItem={({ item }) => <NotificationItem item={item} />}
                    keyExtractor={item => item.id}
                    contentContainerStyle={{ paddingBottom: 20 }}
                />
            )}
        </SafeAreaView>
    );
}

export default NotificationScreen;

/* ===== src\screens\product\ProductDetailScreen.jsx ===== */
// src/screens/product/ProductDetailScreen.jsx
import { FontAwesome, Ionicons } from '@expo/vector-icons';
import { useLocalSearchParams, useRouter } from 'expo-router';
import React, { useEffect, useMemo, useState } from 'react';
import { ActivityIndicator, Alert, Dimensions, FlatList, Image, SafeAreaView, ScrollView, Text, TouchableOpacity, View } from 'react-native';

// Lấy lại hàm generateFakeProducts và StarRating, hoặc import nếu bạn tách ra file riêng
// --- DỮ LIỆU GIẢ ---
const generateFakeProducts = (count = 20) => {
    const products = [];
    const bookTitles = [
        "Lập Trình Với NodeJS", "React Native Cho Người Mới Bắt Đầu", "Kiến Trúc Microservices",
        "Thiết Kế Hướng Dữ Liệu", "Giải Thuật Và Cấu Trúc Dữ Liệu", "Clean Code Handbook",
        "Bí Quyết Trở Thành Fullstack Developer", "Học Docker Trong 24 Giờ", "Kubernetes Nâng Cao",
        "Python Cho Khoa Học Dữ Liệu"
    ];
    const authors = [
        "Nguyễn Văn Coder", "Trần Thị Dev", "Lê Minh Engineer", "Phạm Thuật Toán Gia",
        "Hoàng Hệ Thống", "Mai Kiến Trúc Sư", "Bùi Chuyên Gia", "Đỗ Lập Trình Viên"
    ];
    const categories = ["Công nghệ", "Lập trình", "Phát triển Web", "Mobile App", "Dữ liệu"];

    for (let i = 0; i < count; i++) {
        const original_price = Math.floor(Math.random() * 400 + 100) * 1000; // 100k - 500k
        const discount_percent = Math.random() < 0.6 ? Math.random() * 0.35 + 0.05 : 0; // 5-40% discount, 60% chance
        const sale_price = Math.floor(original_price * (1 - discount_percent) / 1000) * 1000;
        products.push({
            id: products.length, // Đảm bảo ID là duy nhất khi generate
            title: bookTitles[i % bookTitles.length] + (count > bookTitles.length ? ` Vol. ${Math.floor(i / bookTitles.length) + 1}` : ''),
            author: authors[i % authors.length],
            thumbnail_url: `https://picsum.photos/seed/prodthumb${i + 1}/270/400`,
            sale_price: sale_price,
            original_price: original_price,
            average_rating: parseFloat((Math.random() * 1.8 + 3.2).toFixed(1)), // Rating 3.2 - 5.0
            quantity_in_stock: Math.floor(Math.random() * 50) + 5,
            category: categories[i % categories.length],
            description: "Một cuốn sách tuyệt vời dành cho những ai đam mê khám phá và học hỏi. Với nội dung sâu sắc, trình bày rõ ràng và nhiều ví dụ minh họa thực tế, cuốn sách này sẽ là người bạn đồng hành không thể thiếu trên con đường chinh phục tri thức của bạn. Cuốn sách đi sâu vào các khái niệm cốt lõi, cung cấp các kỹ thuật tiên tiến và chia sẻ những kinh nghiệm quý báu từ các chuyên gia hàng đầu trong ngành. Hãy sẵn sàng để mở rộng tầm nhìn và nâng cao kỹ năng của bạn lên một tầm cao mới!",
            images: [
                `https://picsum.photos/seed/prodimg${i + 1}_1/600/800`,
                `https://picsum.photos/seed/prodimg${i + 1}_2/600/800`,
                `https://picsum.photos/seed/prodimg${i + 1}_3/600/800`,
            ],
            publisher: "NXB Tri Thức Việt",
            publication_year: 2023 + Math.floor(i / 5) % 3,
            page_count: Math.floor(Math.random() * 300) + 150,
            form_description: Math.random() > 0.5 ? "Bìa mềm" : "Bìa cứng",
            package_size_info: `${Math.floor(Math.random() * 5) + 15} x ${Math.floor(Math.random() * 5) + 20} x ${Math.floor(Math.random() * 3) + 1} cm`
        });
    }
    return products;
};
const ALL_PRODUCTS_DETAIL_CONTEXT = generateFakeProducts(30);

const StarRating = ({ rating, size = 16, color = "#FFC107", showText = true }) => {
    const fullStars = Math.floor(rating);
    const halfStar = rating % 1 >= 0.4;
    const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
    return (
        <View className="flex-row items-center">
            {[...Array(fullStars)].map((_, i) => <FontAwesome key={`full_${i}`} name="star" size={size} color={color} />)}
            {halfStar && <FontAwesome name="star-half-empty" size={size} color={color} />}
            {[...Array(emptyStars)].map((_, i) => <FontAwesome key={`empty_${i}`} name="star-o" size={size} color={color} />)}
            {showText && <Text className="text-sm text-gray-600 ml-2">{rating.toFixed(1)} ({Math.floor(Math.random() * 100) + 5} đánh giá)</Text>}
        </View>
    );
};

const { width: screenWidth } = Dimensions.get('window');

function ProductDetailScreen({ id }) {
    console.log(ALL_PRODUCTS_DETAIL_CONTEXT, id);

    const router = useRouter();
    const params = useLocalSearchParams();

    const [product, setProduct] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [quantity, setQuantity] = useState(1);
    const [activeImageIndex, setActiveImageIndex] = useState(0);

    useEffect(() => {
        // Giả lập fetch product data
        setIsLoading(true);
        const foundProduct = ALL_PRODUCTS_DETAIL_CONTEXT.find(p => p.id == id);
        setTimeout(() => { // Giả lập độ trễ mạng
            setProduct(foundProduct);
            setIsLoading(false);
        }, 500);
    }, [id]);

    const discountPercent = useMemo(() => {
        if (!product || product.original_price <= product.sale_price) return 0;
        return Math.round(((product.original_price - product.sale_price) / product.original_price) * 100);
    }, [product]);

    const handleAddToCart = () => {
        if (!product) return;
        // Logic thêm vào giỏ hàng (chưa kết nối API)
        Alert.alert("Thêm vào giỏ hàng", `${quantity} x ${product.title} đã được thêm vào giỏ hàng (giả lập).`);
    };

    const renderImageCarousel = ({ item }) => (
        <Image
            source={{ uri: item }}
            className="w-[${screenWidth}] h-[400px]" // Sử dụng width của màn hình
            resizeMode="contain"
        />
    );

    const onScrollImage = (event) => {
        const slideSize = event.nativeEvent.layoutMeasurement.width;
        const index = event.nativeEvent.contentOffset.x / slideSize;
        setActiveImageIndex(Math.round(index));
    };


    if (isLoading) {
        return (
            <SafeAreaView className="flex-1 justify-center items-center bg-white">
                <ActivityIndicator size="large" color="#0EA5E9" />
            </SafeAreaView>
        );
    }

    if (!product) {
        return (
            <SafeAreaView className="flex-1 justify-center items-center bg-slate-100 p-5">
                <Ionicons name="alert-circle-outline" size={70} color="#F87171" />
                <Text className="text-xl font-semibold text-gray-700 mt-4">Không tìm thấy sản phẩm</Text>
                <Text className="text-gray-500 mt-1 text-center">
                    Sản phẩm bạn đang tìm kiếm không tồn tại hoặc đã bị xóa.
                </Text>
                <TouchableOpacity onPress={() => router.back()} className="mt-6 bg-sky-500 px-5 py-2.5 rounded-lg">
                    <Text className="text-white font-medium">Quay lại</Text>
                </TouchableOpacity>
            </SafeAreaView>
        );
    }

    return (
        <SafeAreaView className="flex-1 bg-white">
            <ScrollView showsVerticalScrollIndicator={false}>
                {/* Image Carousel */}
                <View className="h-[400px] bg-slate-100">
                    <FlatList
                        data={product.images}
                        renderItem={renderImageCarousel}
                        keyExtractor={(item, index) => `img_${index}`}
                        horizontal
                        pagingEnabled
                        showsHorizontalScrollIndicator={false}
                        onScroll={onScrollImage}
                        scrollEventThrottle={16} // Quan trọng cho onScroll
                    />
                    {product.images.length > 1 && (
                        <View className="absolute bottom-3 left-0 right-0 flex-row justify-center items-center space-x-2">
                            {product.images.map((_, index) => (
                                <View
                                    key={`dot_${index}`}
                                    className={`h-2 w-2 rounded-full ${index === activeImageIndex ? 'bg-sky-500' : 'bg-gray-400'}`}
                                />
                            ))}
                        </View>
                    )}
                </View>

                {/* Product Info */}
                <View className="p-4">
                    <Text className="text-2xl font-bold text-gray-800 leading-tight">{product.title}</Text>
                    <Text className="text-base text-gray-600 mt-1">Tác giả: {product.author}</Text>

                    {/* Price & Discount */}
                    <View className="mt-3 flex-row items-end space-x-3">
                        <Text className="text-3xl font-bold text-sky-600">
                            {product.sale_price.toLocaleString('vi-VN')}₫
                        </Text>
                        {discountPercent > 0 && (
                            <Text className="text-base text-gray-400 line-through">
                                {product.original_price.toLocaleString('vi-VN')}₫
                            </Text>
                        )}
                        {discountPercent > 0 && (
                            <View className="bg-red-100 px-2 py-0.5 rounded-md border border-red-300">
                                <Text className="text-red-600 text-xs font-semibold">GIẢM {discountPercent}%</Text>
                            </View>
                        )}
                    </View>

                    {/* Rating */}
                    <View className="mt-3">
                        <StarRating rating={product.average_rating} />
                    </View>

                    {/* Stock Status */}
                    <Text className={`mt-3 text-sm font-medium ${product.quantity_in_stock > 0 ? 'text-green-600' : 'text-red-600'}`}>
                        {product.quantity_in_stock > 0 ? `Còn hàng (${product.quantity_in_stock} sản phẩm)` : "Tạm hết hàng"}
                    </Text>
                </View>

                {/* Divider */}
                <View className="h-2 bg-slate-100 my-3" />

                {/* Product Details Section */}
                <View className="p-4">
                    <Text className="text-lg font-semibold text-gray-800 mb-2">Thông tin chi tiết</Text>
                    <View className="space-y-1.5">
                        <InfoRow label="Nhà xuất bản" value={product.publisher} />
                        <InfoRow label="Năm xuất bản" value={product.publication_year.toString()} />
                        <InfoRow label="Số trang" value={product.page_count.toString()} />
                        <InfoRow label="Hình thức bìa" value={product.form_description} />
                        <InfoRow label="Kích thước" value={product.package_size_info} />
                        <InfoRow label="Danh mục" value={product.category} />
                    </View>
                </View>

                {/* Divider */}
                <View className="h-2 bg-slate-100 my-3" />

                {/* Description */}
                <View className="p-4">
                    <Text className="text-lg font-semibold text-gray-800 mb-2">Mô tả sản phẩm</Text>
                    <Text className="text-base text-gray-700 leading-relaxed text-justify">
                        {product.description}
                    </Text>
                </View>

                {/* TODO: Customer Reviews Section */}
                {/* TODO: Related Products Section */}

            </ScrollView>

            {/* Bottom Action Bar */}
            <View className="border-t border-gray-200 p-3 bg-white flex-row items-center space-x-3">
                {/* Quantity Selector - Tạm thời ẩn, có thể thêm sau này khi tích hợp giỏ hàng */}
                {/* <View className="flex-row items-center border border-gray-300 rounded-md">
                    <TouchableOpacity onPress={() => setQuantity(q => Math.max(1, q - 1))} className="p-2.5">
                        <Ionicons name="remove" size={20} color="#374151" />
                    </TouchableOpacity>
                    <Text className="px-3 text-base font-medium text-gray-700">{quantity}</Text>
                    <TouchableOpacity onPress={() => setQuantity(q => Math.min(product.quantity_in_stock || 1, q + 1))} className="p-2.5">
                        <Ionicons name="add" size={20} color="#374151" />
                    </TouchableOpacity>
                </View> */}
                <TouchableOpacity
                    onPress={() => Alert.alert("Tính năng đang phát triển", "Chat với người bán sẽ sớm được cập nhật.")}
                    className="p-3 border border-sky-500 rounded-lg"
                >
                    <Ionicons name="chatbubbles-outline" size={24} color="#0EA5E9" />
                </TouchableOpacity>
                <TouchableOpacity
                    onPress={handleAddToCart}
                    disabled={product.quantity_in_stock === 0}
                    className={`flex-1 py-3.5 rounded-lg shadow ${product.quantity_in_stock > 0 ? 'bg-sky-500 active:bg-sky-600' : 'bg-gray-400'}`}
                >
                    <Text className="text-white text-center text-base font-semibold">
                        {product.quantity_in_stock > 0 ? "Thêm vào giỏ hàng" : "Hết hàng"}
                    </Text>
                </TouchableOpacity>
            </View>
        </SafeAreaView>
    );
}

const InfoRow = ({ label, value }) => (
    <View className="flex-row">
        <Text className="w-1/3 text-sm text-gray-500">{label}:</Text>
        <Text className="flex-1 text-sm text-gray-800 font-medium">{value}</Text>
    </View>
);

export default ProductDetailScreen;

/* ===== src\screens\product\ProductScreen.jsx ===== */
// src/screens/product/ProductScreen.jsx
import { FontAwesome, Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import React, { useMemo, useState } from 'react';
import { ActivityIndicator, FlatList, Image, SafeAreaView, Text, TextInput, TouchableOpacity, View } from 'react-native';

// --- DỮ LIỆU GIẢ --- (Tương tự HomeScreen, nhưng có thể thêm các trường khác nếu cần)
const generateFakeProducts = (count = 20) => {
    const products = [];
    const bookTitles = [
        "Lập Trình Với NodeJS", "React Native Cho Người Mới Bắt Đầu", "Kiến Trúc Microservices",
        "Thiết Kế Hướng Dữ Liệu", "Giải Thuật Và Cấu Trúc Dữ Liệu", "Clean Code Handbook",
        "Bí Quyết Trở Thành Fullstack Developer", "Học Docker Trong 24 Giờ", "Kubernetes Nâng Cao",
        "Python Cho Khoa Học Dữ Liệu"
    ];
    const authors = [
        "Nguyễn Văn Coder", "Trần Thị Dev", "Lê Minh Engineer", "Phạm Thuật Toán Gia",
        "Hoàng Hệ Thống", "Mai Kiến Trúc Sư", "Bùi Chuyên Gia", "Đỗ Lập Trình Viên"
    ];
    const categories = ["Công nghệ", "Lập trình", "Phát triển Web", "Mobile App", "Dữ liệu"];

    for (let i = 0; i < count; i++) {
        const original_price = Math.floor(Math.random() * 400 + 100) * 1000; // 100k - 500k
        const discount_percent = Math.random() < 0.6 ? Math.random() * 0.35 + 0.05 : 0; // 5-40% discount, 60% chance
        const sale_price = Math.floor(original_price * (1 - discount_percent) / 1000) * 1000;
        products.push({
            id: products.length === 0 ? 1 : products[products.length - 1].id + 1,
            title: bookTitles[i % bookTitles.length] + (count > bookTitles.length ? ` Vol. ${Math.floor(i / bookTitles.length) + 1}` : ''),
            author: authors[i % authors.length],
            thumbnail_url: `https://picsum.photos/seed/prodthumb${i + 1}/270/400`,
            sale_price: sale_price,
            original_price: original_price,
            average_rating: parseFloat((Math.random() * 1.8 + 3.2).toFixed(1)), // Rating 3.2 - 5.0
            quantity_in_stock: Math.floor(Math.random() * 50) + 5,
            category: categories[i % categories.length],
            description: "Một cuốn sách tuyệt vời dành cho những ai đam mê khám phá và học hỏi. Với nội dung sâu sắc, trình bày rõ ràng và nhiều ví dụ minh họa thực tế, cuốn sách này sẽ là người bạn đồng hành không thể thiếu trên con đường chinh phục tri thức của bạn.",
            images: [
                `https://picsum.photos/seed/prodimg${i + 1}_1/600/800`,
                `https://picsum.photos/seed/prodimg${i + 1}_2/600/800`,
                `https://picsum.photos/seed/prodimg${i + 1}_3/600/800`,
            ],
            publisher: "NXB Tri Thức Việt",
            publication_year: 2023 + Math.floor(i / 5) % 3, // 2023, 2024, 2025
            page_count: Math.floor(Math.random() * 300) + 150, // 150-450 pages
            form_description: Math.random() > 0.5 ? "Bìa mềm" : "Bìa cứng",
        });
    }
    return products;
};

const ALL_PRODUCTS = generateFakeProducts(30);
// --- KẾT THÚC DỮ LIỆU GIẢ ---

const StarRating = ({ rating, size = 14, color = "#FFC107" }) => {
    const fullStars = Math.floor(rating);
    const halfStar = rating % 1 >= 0.4; // Điều chỉnh ngưỡng cho nửa sao
    const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);
    return (
        <View className="flex-row items-center">
            {[...Array(fullStars)].map((_, i) => <FontAwesome key={`full_${i}`} name="star" size={size} color={color} />)}
            {halfStar && <FontAwesome name="star-half-empty" size={size} color={color} />}
            {[...Array(emptyStars)].map((_, i) => <FontAwesome key={`empty_${i}`} name="star-o" size={size} color={color} />)}
            <Text className="text-xs text-gray-500 ml-1.5">{rating.toFixed(1)}</Text>
        </View>
    );
};

const ProductItem = ({ item, onPress }) => {
    const discountPercent = item.original_price > item.sale_price
        ? Math.round(((item.original_price - item.sale_price) / item.original_price) * 100)
        : 0;

    return (
        <TouchableOpacity
            onPress={onPress}
            className="bg-white rounded-lg shadow-md overflow-hidden m-2 flex-1 max-w-[48%]" // Sử dụng max-w để có 2 cột
        >
            <Image
                source={{ uri: item.thumbnail_url }}
                className="w-full h-48"
                resizeMode="cover"
            />
            {discountPercent > 0 && (
                <View className="absolute top-2 right-2 bg-red-500 px-2 py-0.5 rounded-full">
                    <Text className="text-white text-xs font-semibold">-{discountPercent}%</Text>
                </View>
            )}
            <View className="p-3">
                <Text className="text-sm font-semibold text-gray-800 leading-tight" numberOfLines={2}>{item.title}</Text>
                <Text className="text-xs text-gray-500 mt-0.5" numberOfLines={1}>{item.author}</Text>
                <View className="mt-1.5">
                    <Text className="text-base font-bold text-sky-600">
                        {item.sale_price.toLocaleString('vi-VN')}₫
                    </Text>
                    {item.original_price > item.sale_price && (
                        <Text className="text-xs text-gray-400 line-through">
                            {item.original_price.toLocaleString('vi-VN')}₫
                        </Text>
                    )}
                </View>
                <View className="mt-1.5">
                    <StarRating rating={item.average_rating} />
                </View>
            </View>
        </TouchableOpacity>
    );
};

function ProductScreen() {
    const router = useRouter();
    const [searchQuery, setSearchQuery] = useState('');
    const [isLoading, setIsLoading] = useState(false); // Sẽ dùng khi có API

    const filteredProducts = useMemo(() => {
        if (!searchQuery) {
            return ALL_PRODUCTS;
        }
        return ALL_PRODUCTS.filter(product =>
            product.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
            product.author.toLowerCase().includes(searchQuery.toLowerCase()) ||
            product.category.toLowerCase().includes(searchQuery.toLowerCase())
        );
    }, [searchQuery]);

    const handleProductPress = (product) => {
        router.push(`/product/${product.id}`);
    };

    return (
        <SafeAreaView className="flex-1 bg-slate-100">
            {/* Search Bar */}
            <View className="bg-white p-3 border-b border-gray-200 shadow-sm">
                <View className="flex-row items-center bg-slate-100 rounded-lg px-3 py-2.5">
                    <Ionicons name="search-outline" size={22} color="#6B7280" className="mr-2" />
                    <TextInput
                        className="flex-1 text-base text-gray-800"
                        placeholder="Tìm kiếm sách, tác giả..."
                        placeholderTextColor="#9CA3AF"
                        value={searchQuery}
                        onChangeText={setSearchQuery}
                    />
                    {searchQuery ? (
                        <TouchableOpacity onPress={() => setSearchQuery('')}>
                            <Ionicons name="close-circle" size={20} color="#9CA3AF" />
                        </TouchableOpacity>
                    ) : null}
                </View>
                {/* TODO: Add filter buttons here if needed */}
            </View>

            {isLoading ? (
                <View className="flex-1 justify-center items-center">
                    <ActivityIndicator size="large" color="#0EA5E9" />
                </View>
            ) : filteredProducts.length === 0 ? (
                <View className="flex-1 justify-center items-center p-5">
                    <Ionicons name="sad-outline" size={70} color="#CBD5E1" />
                    <Text className="text-xl font-semibold text-gray-500 mt-4">Không tìm thấy sản phẩm</Text>
                    <Text className="text-gray-400 mt-1 text-center">
                        Vui lòng thử với từ khóa khác hoặc kiểm tra lại bộ lọc.
                    </Text>
                </View>
            ) : (
                <FlatList
                    data={filteredProducts}
                    renderItem={({ item }) => <ProductItem item={item} onPress={() => handleProductPress(item)} />}
                    keyExtractor={item => item.id}
                    numColumns={2} // Hiển thị 2 cột
                    contentContainerStyle={{ paddingHorizontal: 6, paddingVertical: 8 }}
                    showsVerticalScrollIndicator={false}
                />
            )}
        </SafeAreaView>
    );
}

export default ProductScreen;

/* ===== src\services\api.js ===== */
/*
####################################################################
# api.js (EXISTING - PROVIDED FOR CONTEXT - NO CHANGES NEEDED HERE)
####################################################################
*/
// src/services/api.js
import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { router } from 'expo-router'; // Để điều hướng khi token hết hạn

const API_BASE_URL = process.env.EXPO_PUBLIC_API_URL || 'http://localhost:8888/api/v1';

const api = axios.create({
    baseURL: API_BASE_URL, headers: {
        'Content-Type': 'application/json',
    }, timeout: 15000, // Timeout sau 15 giây
});

// Request interceptor để đính kèm token
api.interceptors.request.use(async (config) => {
    const token = await AsyncStorage.getItem('authToken');
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    // Đối với request upload file, cần set Content-Type là multipart/form-data
    if (config.data instanceof FormData) {
        config.headers['Content-Type'] = 'multipart/form-data';
    }
    return config;
}, (error) => {
    return Promise.reject(error);
});

// Response interceptor để xử lý lỗi chung
api.interceptors.response.use((response) => {
    return response.data; // Trả về ApiResponse từ backend
}, async (error) => {
    const originalRequest = error.config;

    if (error.response) {
        const { status, data } = error.response;
        console.error('API Error:', status, data ? JSON.stringify(data) : error.message);

        if (status === 401 && originalRequest.url !== '/identity/auth/login' && !originalRequest._retry) {
            originalRequest._retry = true;
            console.log('Token expired or invalid, attempting to refresh or redirecting...');

            await AsyncStorage.multiRemove(['authToken', 'refreshToken', 'currentUser']);
            if (router.canGoBack()) {
                router.replace('/(auth)/login');
            } else {
                router.push('/(auth)/login');
            }
            return Promise.reject(new Error(data?.message || "Session expired. Please login again."));
        }
        return Promise.reject(data || new Error(error.message || 'An unknown error occurred'));
    } else if (error.request) {
        console.error('Network Error:', error.request);
        return Promise.reject(new Error('Network error. Please check your connection and try again.'));
    } else {
        console.error('Error setting up request:', error.message);
        return Promise.reject(error);
    }
});

export default api;

/* ===== src\services\blogService.js ===== */


/*
####################################################################
# blogService.js
####################################################################
*/
// src/services/blogService.js
import api from './api';

const blogService = {
    // GET /blog
    getAllBlogs: async (filter = {}, pageIndex = 1, pageSize = 10) => {
        const params = {
            ...filter,
            pageIndex: pageIndex > 0 ? pageIndex : 1, // API from example seems 1-based
            pageSize,
        };
        try {
            const response = await api.get('/blog', { params });
            // axios_response_example shows pageIndex starting from 1 for blogs
            // Ensure backend BlogServiceImpl page is 0-indexed: page = pageIndex - 1
            // Or if backend is 1-indexed for this specific endpoint, keep as is.
            // Assuming example is correct and this specific endpoint uses 1-based for request.
            return response; // ApiResponse<PageResponse<BlogResponse>>
        } catch (error) {
            console.error('Get all blogs failed:', error.message || error);
            throw error;
        }
    },

    // GET /blog/{id}
    getBlogById: async (blogId) => {
        try {
            const response = await api.get(`/blog/${blogId}`);
            return response; // ApiResponse<BlogResponse>
        } catch (error) {
            console.error(`Get blog ${blogId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /blog
    createBlog: async (blogData, thumbnailFile) => {
        // blogData: { title, content, priority, categoryId }
        const formData = new FormData();
        formData.append('blog', JSON.stringify(blogData));
        formData.append('thumbnail', {
            uri: thumbnailFile.uri,
            name: thumbnailFile.fileName || `thumbnail-${Date.now()}.${thumbnailFile.uri.split('.').pop()}`,
            type: thumbnailFile.mimeType || 'image/jpeg',
        });
        try {
            const response = await api.post('/blog', formData);
            return response; // ApiResponse<BlogResponse>
        } catch (error) {
            console.error('Create blog failed:', error.message || error);
            throw error;
        }
    },

    // PUT /blog/{id}
    updateBlog: async (blogId, blogData, thumbnailFile = null) => {
        const formData = new FormData();
        formData.append('blog', JSON.stringify(blogData));
        if (thumbnailFile) {
            formData.append('thumbnail', {
                uri: thumbnailFile.uri,
                name: thumbnailFile.fileName || `thumb-update-${Date.now()}.${thumbnailFile.uri.split('.').pop()}`,
                type: thumbnailFile.mimeType || 'image/jpeg',
            });
        }
        try {
            const response = await api.put(`/blog/${blogId}`, formData);
            return response; // ApiResponse<BlogResponse>
        } catch (error) {
            console.error(`Update blog ${blogId} failed:`, error.message || error);
            throw error;
        }
    },

    // DELETE /blog/{id}
    deleteBlog: async (blogId) => {
        try {
            const response = await api.delete(`/blog/${blogId}`);
            return response; // ApiResponse<Void>
        } catch (error) {
            console.error(`Delete blog ${blogId} failed:`, error.message || error);
            throw error;
        }
    },

    // GET /blog/category
    getAllBlogCategories: async () => {
        try {
            const response = await api.get('/blog/category');
            return response; // ApiResponse<List<CategoryResponse>>
        } catch (error) {
            console.error('Get all blog categories failed:', error.message || error);
            throw error;
        }
    },

    // POST /blog/file/media - This seems redundant if createBlog handles upload.
    // But if needed for other purposes:
    uploadBlogMedia: async (mediaFile) => {
        const formData = new FormData();
        formData.append('file', {
            uri: mediaFile.uri,
            name: mediaFile.fileName || `blog-media-${Date.now()}.${mediaFile.uri.split('.').pop()}`,
            type: mediaFile.mimeType || 'application/octet-stream',
        });
        try {
            // Note: The path in api_endpoints.txt is /blog/file/media
            // The FeignClient in blog-service for FileServiceClientRepository has /file/media
            // The gateway route for file-service is /file/**, and for blog-service is /blog/**
            // If this call is intended for the FileService THROUGH the blog-service's FeignClient,
            // the path called from frontend should be /blog/file/media
            // If it's intended for the FileService directly (but prefixed by blog in gateway for some reason)
            // it still would be /blog/file/media via gateway.
            // The backend blog-service has FileServiceClientRepository with @FeignClient(name = "file-service", url = "${app.file-service.url}")
            // and methods like @PostMapping(value = "/file/media" ...).
            // This means blog-service internally calls file-service at file-service's /file/media.
            // The frontend API Gateway path for blog-service is /api/v1/blog.
            // So, POST /api/v1/blog/file/media is correct if blog-service itself exposes /file/media.
            // Based on `api_endpoints.txt` `POST blog/file/media` -> this implies a path *within* the blog service context.
            const response = await api.post('/blog/file/media', formData);
            return response; // ApiResponse<FileResponse>
        } catch (error) {
            console.error('Upload blog media failed:', error.message || error);
            throw error;
        }
    },

    // DELETE /blog/file/media/{fileName}
    deleteBlogMedia: async (fileName) => {
        try {
            const response = await api.delete(`/blog/file/media/${fileName}`);
            return response; // ApiResponse<FileResponse>
        } catch (error) {
            console.error(`Delete blog media ${fileName} failed:`, error.message || error);
            throw error;
        }
    },
};
export default blogService;

/* ===== src\services\cartService.js ===== */



/*
####################################################################
# cartService.js
####################################################################
*/
// src/services/cartService.js
import api from './api';

const cartService = {
    // POST /cart/cart-products
    addProductToCart: async (cartProductData) => { // { productId, quantity }
        try {
            const response = await api.post('/cart/cart-products', cartProductData);
            return response; // ApiResponse<CartProductResponse>
        } catch (error) {
            console.error('Add product to cart failed:', error.message || error);
            throw error;
        }
    },

    // DELETE /cart/cart-products
    removeProductsFromCart: async (cartProductIds) => { // Array<integer>
        try {
            const response = await api.delete('/cart/cart-products', { data: cartProductIds });
            return response; // ApiResponse<string>
        } catch (error) {
            console.error('Remove products from cart failed:', error.message || error);
            throw error;
        }
    },

    // GET /cart - Assuming this endpoint exists to get the current user's cart
    // This is needed for CartContext to function as described
    getMyCart: async () => {
        try {
            // This endpoint is not explicitly in your backend controller snippets or api_endpoints.txt
            // but is a common requirement.
            const response = await api.get('/cart');
            return response; // Example: ApiResponse<{ id: number, userId: number, cartProducts: CartProductResponse[] }>
        } catch (error) {
            console.error('Get my cart failed:', error.message || error);
            // Return an empty cart structure or throw, depending on how UI handles it
            return { status: error.status || 500, message: error.message || "Failed to fetch cart", result: { cartProducts: [] }, timestamp: new Date().toISOString() };
        }
    },

    // PUT /cart/cart-products/{cartProductId} - Assuming this endpoint for updating quantity
    // This is also not in the spec but is a common cart operation.
    updateCartItemQuantity: async (cartProductId, quantity) => {
        try {
            const response = await api.put(`/cart/cart-products/${cartProductId}`, { quantity });
            return response; // ApiResponse<CartProductResponse>
        } catch (error) {
            console.error(`Update cart item ${cartProductId} quantity failed:`, error.message || error);
            throw error;
        }
    },


    // POST cart/internal/users - Marked as internal, likely not for direct client use but listed in API spec
    _internalCreateCartForUser: async (cartCreateRequest) => { // { userId, id (cartId) }
        try {
            const response = await api.post('/cart/internal/users', cartCreateRequest);
            return response; // ApiResponse<CartResponse>
        } catch (error) {
            console.error('Internal create cart for user failed:', error.message || error);
            throw error;
        }
    }
};
export default cartService;

/* ===== src\services\categoryService.js ===== */

/*
####################################################################
# categoryService.js
####################################################################
*/
// src/services/categoryService.js
import api from './api';

const categoryService = {
    // GET /category
    getAllCategories: async (name, isAsc) => {
        const params = {};
        if (name) params.name = name;
        if (isAsc !== undefined) params.isAsc = isAsc;
        try {
            const response = await api.get('/category', { params });
            return response; // ApiResponse<List<CategoryResponse>> (tree structure)
        } catch (error) {
            console.error('Get all categories failed:', error.message || error);
            throw error;
        }
    },

    // GET /category/{id}
    getCategoryById: async (categoryId) => {
        try {
            const response = await api.get(`/category/${categoryId}`);
            return response; // ApiResponse<CategoryTreeResponse>
        } catch (error) {
            console.error(`Get category ${categoryId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /category (Admin/Staff only)
    createCategory: async (categoryData) => { // { name, priority, parentId, type }
        try {
            const response = await api.post('/category', categoryData);
            return response; // ApiResponse<CategoryResponse>
        } catch (error) {
            console.error('Create category failed:', error.message || error);
            throw error;
        }
    },

    // PUT /category/{id} (Admin/Staff only)
    updateCategory: async (categoryId, categoryData) => { // { name, priority, parentId, type }
        try {
            const response = await api.put(`/category/${categoryId}`, categoryData);
            return response; // ApiResponse<CategoryResponse>
        } catch (error) {
            console.error(`Update category ${categoryId} failed:`, error.message || error);
            throw error;
        }
    },

    // DELETE /category/{id} (Admin/Staff only)
    deleteCategory: async (categoryId) => {
        try {
            const response = await api.delete(`/category/${categoryId}`);
            return response; // ApiResponse<Void>
        } catch (error) {
            console.error(`Delete category ${categoryId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /category/seeding/{numberOfRecords} (Admin/Staff only)
    seedCategories: async (numberOfRecords) => {
        try {
            const response = await api.post(`/category/seeding/${numberOfRecords}`);
            return response; // ApiResponse<String>
        } catch (error) {
            console.error('Seed categories failed:', error.message || error);
            throw error;
        }
    },
};
export default categoryService;

/* ===== src\services\customerService.js ===== */


/*
####################################################################
# customerService.js
####################################################################
*/
// src/services/customerService.js
import api from './api';

const customerService = {
    // GET /customer (Admin/Staff only)
    getAllContacts: async (pageIndex = 1, pageSize = 10, sortDir) => {
        const params = {
            // Backend CustomerCareService uses 0-based page index for PageRequest.of
            pageIndex: pageIndex > 0 ? pageIndex : 1, // But API example uses 1-based
            pageSize,
        };
        if (sortDir) params.sortDir = sortDir;
        try {
            const response = await api.get('/customer', { params });
            // Assuming example is correct and this endpoint uses 1-based for request.
            return response; // ApiResponse<PageResponse<CustomerCareResponse>>
        } catch (error) {
            console.error('Get all customer contacts failed:', error.message || error);
            throw error;
        }
    },

    // GET /customer/{id} (Admin/Staff only)
    getContactById: async (contactId) => {
        try {
            const response = await api.get(`/customer/${contactId}`);
            return response; // ApiResponse<CustomerCareResponse>
        } catch (error) {
            console.error(`Get customer contact ${contactId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /customer
    createContact: async (contactData) => { // { name, phone, email, address, content }
        try {
            const response = await api.post('/customer', contactData);
            return response; // ApiResponse<CustomerCareResponse>
        } catch (error) {
            console.error('Create customer contact failed:', error.message || error);
            throw error;
        }
    },

    // DELETE /customer/{id} (Admin/Staff only)
    deleteContact: async (contactId) => {
        try {
            const response = await api.delete(`/customer/${contactId}`);
            return response; // ApiResponse<Void>
        } catch (error) {
            console.error(`Delete customer contact ${contactId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /customer/seeding/{numberOfRecords} (Admin/Staff only)
    seedContacts: async (numberOfRecords) => {
        try {
            const response = await api.post(`/customer/seeding/${numberOfRecords}`);
            return response; // ApiResponse<String>
        } catch (error) {
            console.error('Seed customer contacts failed:', error.message || error);
            throw error;
        }
    },
};
export default customerService;

/* ===== src\services\fileService.js ===== */


/*
####################################################################
# fileService.js
####################################################################
*/
// src/services/fileService.js
import api from './api';

const fileService = {
    // POST /file/media
    uploadFile: async (file) => { // file: { uri, fileName, mimeType }
        const formData = new FormData();
        formData.append('file', {
            uri: file.uri,
            name: file.fileName || `upload-${Date.now()}.${file.uri.split('.').pop()}`,
            type: file.mimeType || 'application/octet-stream', // Ensure correct MIME type
        });
        try {
            const response = await api.post('/file/media', formData);
            return response; // ApiResponse<FileResponse { originalFileName, url }>
        } catch (error) {
            console.error('Upload file failed:', error.message || error);
            throw error;
        }
    },

    // GET /file/media/download/{fileName} - This returns the actual file resource
    // For mobile, usually you just need the URL to display an image or for a WebView.
    getDownloadUrl: (fileName) => {
        // Simply constructs the URL based on API base and path
        return `${api.defaults.baseURL}/file/media/download/${fileName}`;
    },

    // DELETE /file/media/{fileName}
    deleteFile: async (fileName) => {
        try {
            const response = await api.delete(`/file/media/${fileName}`);
            // Backend returns void, API spec does not specify response body, assume success if no error
            return { status: 200, message: "File deleted successfully", result: null, timestamp: new Date().toISOString() };
        } catch (error) {
            console.error(`Delete file ${fileName} failed:`, error.message || error);
            throw error;
        }
    },
};
export default fileService;

/* ===== src\services\identityService.js ===== */
/*
####################################################################
# identityService.js (Replaces authService.js)
####################################################################
*/
// src/services/identityService.js
import AsyncStorage from '@react-native-async-storage/async-storage';
import api from './api';

const AUTH_TOKEN_KEY = 'authToken';
const REFRESH_TOKEN_KEY = 'refreshToken';
const CURRENT_USER_KEY = 'currentUser';

const identityService = {
    // === Authentication ===
    login: async (credentials) => { // credentials: { username, password }
        try {
            const response = await api.post('/identity/auth/login', credentials);
            if (response && response.result && response.result.token) {
                await AsyncStorage.setItem(AUTH_TOKEN_KEY, response.result.token);
                // Assuming API might return refreshToken and user details upon login
                if (response.result.refreshToken) { // Hypothetical
                    await AsyncStorage.setItem(REFRESH_TOKEN_KEY, response.result.refreshToken);
                }
                // Fetch and store user info after login if not included in login response
                // For now, we assume login response is sufficient or getMyInfo is called separately
            }
            return response; // ApiResponse<AuthenticationResponse>
        } catch (error) {
            console.error('Login failed in identityService:', error.message || error);
            throw error;
        }
    },

    logout: async () => {
        try {
            const token = await AsyncStorage.getItem(AUTH_TOKEN_KEY);
            if (token) {
                await api.post('/identity/auth/logout', { token });
            }
        } catch (apiError) {
            console.error('API Logout failed, proceeding with local logout:', apiError.message || apiError);
        } finally {
            await AsyncStorage.removeItem(AUTH_TOKEN_KEY);
            await AsyncStorage.removeItem(REFRESH_TOKEN_KEY);
            await AsyncStorage.removeItem(CURRENT_USER_KEY);
            console.log('Logged out locally, tokens and user info removed.');
        }
    },

    introspectToken: async (token) => {
        try {
            const response = await api.post('/identity/auth/introspect', { token });
            return response; // ApiResponse<IntrospectResponse>
        } catch (error) {
            console.error('Introspect token failed:', error.message || error);
            throw error;
        }
    },

    refreshToken: async () => {
        const currentRefreshToken = await AsyncStorage.getItem(REFRESH_TOKEN_KEY);
        if (!currentRefreshToken) {
            console.log('No refresh token available for refreshing session.');
            await identityService.logout();
            throw new Error('No refresh token available.');
        }
        try {
            const response = await api.post('/identity/auth/refresh-token', { token: currentRefreshToken });
            if (response && response.result && response.result.token) {
                await AsyncStorage.setItem(AUTH_TOKEN_KEY, response.result.token);
                // if (response.result.refreshToken) { // If API provides a new refresh token
                //    await AsyncStorage.setItem(REFRESH_TOKEN_KEY, response.result.refreshToken);
                // }
                return response.result.token;
            }
            await identityService.logout();
            throw new Error('Failed to refresh token, new token not received.');
        } catch (error) {
            console.error('Refresh token API call failed:', error.message || error);
            await identityService.logout();
            throw error;
        }
    },

    // === Password Recovery ===
    sendOtpForgotPassword: async (username) => {
        try {
            const response = await api.post('/identity/auth/password-recovery/otp', { username });
            return response; // ApiResponse<string>
        } catch (error) {
            console.error('Send OTP for forgot password failed:', error.message || error);
            throw error;
        }
    },

    verifyOtpForgotPassword: async (username, otp) => {
        try {
            const response = await api.post('/identity/auth/password-recovery/otp/verify', { username, otp });
            return response; // ApiResponse<VerifyOtpResponse>
        } catch (error) {
            console.error('Verify OTP for forgot password failed:', error.message || error);
            throw error;
        }
    },

    resetPasswordWithToken: async (newPassword, verificationToken) => {
        try {
            const response = await api.post('/identity/auth/password-recovery/reset', { newPassword, verificationToken });
            return response; // ApiResponse<string>
        } catch (error) {
            console.error('Reset password failed:', error.message || error);
            throw error;
        }
    },

    // === User Management ===
    register: async (userData) => { // userData: { username, password, email }
        try {
            const response = await api.post('/identity/users/register', userData);
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error('Registration failed in identityService:', error.message || error);
            throw error;
        }
    },

    // === Profile Management (moved to profileService, but some user-specific identity calls remain here) ===
    updateMyProfileImage: async (profileImageFile) => {
        // profileImageFile: { uri, fileName, mimeType }
        const formData = new FormData();
        formData.append('profileImage', {
            uri: profileImageFile.uri,
            name: profileImageFile.fileName || `profile-${Date.now()}.${profileImageFile.uri.split('.').pop()}`,
            type: profileImageFile.mimeType || 'image/jpeg',
        });
        try {
            const response = await api.put('/identity/users/profile-image', formData); // Note: API spec shows param, but controller takes RequestPart
            if (response && response.result) {
                const currentUser = await identityService.getCurrentUser();
                if (currentUser) {
                    await identityService.setCurrentUser({ ...currentUser, profileImage: response.result.profileImage });
                }
            }
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error('Update my profile image failed:', error.message || error);
            throw error;
        }
    },

    updateMyPassword: async (userId, passwords) => { // passwords: { oldPassword, newPassword }
        try {
            const response = await api.patch(`/identity/users/${userId}/password`, passwords);
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error(`Update password for user ${userId} failed:`, error.message || error);
            throw error;
        }
    },

    // === Admin/Role Specific (usually not called from basic mobile client but included for completeness) ===
    getAllUsersForAdmin: async (pageIndex = 1, pageSize = 10) => {
        try {
            // Backend UserController uses 0-based pageIndex
            const response = await api.get('/identity/users', { params: { pageIndex: pageIndex > 0 ? pageIndex - 1 : 0, pageSize } });
            return response; // ApiResponse<PageResponse<UserResponse>>
        } catch (error) {
            console.error('Admin: Get all users failed:', error.message || error);
            throw error;
        }
    },

    updateUserAsAdmin: async (userId, userData) => { // userData: { password, email, roles }
        try {
            const response = await api.put(`/identity/users/${userId}`, userData);
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error(`Admin: Update user ${userId} failed:`, error.message || error);
            throw error;
        }
    },

    deleteUserAsAdmin: async (userId) => {
        try {
            const response = await api.delete(`/identity/users/${userId}`);
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error(`Admin: Delete user ${userId} failed:`, error.message || error);
            throw error;
        }
    },

    seedUsersAsAdmin: async (numberOfRecords) => {
        try {
            const response = await api.post(`/identity/users/seeding/${numberOfRecords}`);
            return response; // ApiResponse<String>
        } catch (error) {
            console.error('Admin: Seed users failed:', error.message || error);
            throw error;
        }
    },

    // Permissions (Admin only)
    createPermission: async (permissionData) => { // { name, description }
        try {
            const response = await api.post('/identity/permissions', permissionData);
            return response; // ApiResponse<PermissionResponse>
        } catch (error) {
            throw error;
        }
    },
    getAllPermissions: async () => {
        try {
            const response = await api.get('/identity/permissions');
            return response; // ApiResponse<List<PermissionResponse>>
        } catch (error) {
            throw error;
        }
    },
    deletePermission: async (permissionName) => {
        try {
            const response = await api.delete(`/identity/permissions/${permissionName}`);
            return response; // ApiResponse<PermissionResponse>
        } catch (error) {
            throw error;
        }
    },

    // Roles (Admin only)
    createRole: async (roleData) => { // { name, description, permissions: ["perm1"] }
        try {
            const response = await api.post('/identity/roles', roleData);
            return response; // ApiResponse<RoleResponse>
        } catch (error) {
            throw error;
        }
    },
    getAllRoles: async () => {
        try {
            const response = await api.get('/identity/roles');
            return response; // ApiResponse<List<RoleResponse>>
        } catch (error) {
            throw error;
        }
    },
    deleteRole: async (roleName) => {
        try {
            const response = await api.delete(`/identity/roles/${roleName}`);
            return response; // ApiResponse<RoleResponse>
        } catch (error) {
            throw error;
        }
    },


    // === AsyncStorage Helpers ===
    getAuthToken: async () => AsyncStorage.getItem(AUTH_TOKEN_KEY),
    getRefreshToken: async () => AsyncStorage.getItem(REFRESH_TOKEN_KEY),
    getCurrentUser: async () => {
        const userJson = await AsyncStorage.getItem(CURRENT_USER_KEY);
        return userJson ? JSON.parse(userJson) : null;
    },
    setCurrentUser: async (userData) => {
        if (userData) {
            await AsyncStorage.setItem(CURRENT_USER_KEY, JSON.stringify(userData));
        } else {
            await AsyncStorage.removeItem(CURRENT_USER_KEY);
        }
    },
    isAuthenticated: async () => {
        const token = await AsyncStorage.getItem(AUTH_TOKEN_KEY);
        return !!token; // True if token exists and is not empty
    },
};
export default identityService;

/* ===== src\services\index.js ===== */
// src/services/index.js
export {default as api} from './api';
export {default as blogService} from './blogService';
export {default as cartService} from './cartService';
export {default as categoryService} from './categoryService';
export {default as customerService} from './customerService';
export {default as fileService} from './fileService';
export {default as identityService} from './identityService';
export {default as notificationService} from './notificationService';
export {default as orderService} from './orderService';
export {default as paymentService} from './paymentService';
export {default as productService} from './productService';
export {default as profileService} from './profileService';


/* ===== src\services\notificationService.js ===== */


/*
####################################################################
# notificationService.js
####################################################################
*/
// src/services/notificationService.js
import api from './api';

const notificationService = {
    // POST /notification/fcm-token
    registerFcmToken: async (fcmToken) => { // fcmToken (string)
        try {
            const response = await api.post('/notification/fcm-token', { token: fcmToken });
            return response; // ApiResponse<FcmTokenResponse>
        } catch (error) {
            console.error('Register FCM token failed:', error.message || error);
            throw error;
        }
    },

    // Example: Get user's notifications (assuming endpoint exists)
    getMyNotifications: async (pageIndex = 1, pageSize = 10) => {
        try {
            // This endpoint is an assumption. Replace with actual if available.
            const response = await api.get('/notification/my-notifications', {
                params: { pageIndex, pageSize }
            });
            return response; // Example: ApiResponse<PageResponse<NotificationItem>>
        } catch (error) {
            console.error('Get my notifications failed:', error.message || error);
            // Return a default structure or throw
            return { status: error.status || 500, message: error.message || "Failed to fetch notifications", result: { content: [], totalPages: 0, totalElements: 0 }, timestamp: new Date().toISOString() };

        }
    },

    // Example: Mark notification as read (assuming endpoint exists)
    markNotificationAsRead: async (notificationId) => {
        try {
            // This endpoint is an assumption.
            const response = await api.patch(`/notification/${notificationId}/read`);
            return response;
        } catch (error) {
            console.error(`Mark notification ${notificationId} as read failed:`, error.message || error);
            throw error;
        }
    },

    // Example: Mark all as read (assuming endpoint exists)
    markAllNotificationsAsRead: async () => {
        try {
            // This endpoint is an assumption.
            const response = await api.post(`/notification/mark-all-read`);
            return response;
        } catch (error) {
            console.error(`Mark all notifications as read failed:`, error.message || error);
            throw error;
        }
    },
    // Example: Delete a notification (assuming endpoint exists)
    deleteNotification: async (notificationId) => {
        try {
            const response = await api.delete(`/notification/${notificationId}`);
            return response;
        } catch (error) {
            console.error(`Delete notification ${notificationId} failed:`, error.message || error);
            throw error;
        }
    },

    // Example: Delete all notifications (assuming endpoint exists)
    deleteAllNotifications: async () => {
        try {
            const response = await api.delete(`/notification/all`);
            return response;
        } catch (error) {
            console.error(`Delete all notifications failed:`, error.message || error);
            throw error;
        }
    }
};
export default notificationService;

/* ===== src\services\orderService.js ===== */


/*
####################################################################
# orderService.js
####################################################################
*/
// src/services/orderService.js
import api from './api';

const orderService = {
    // POST /order
    createOrder: async (orderData) => {
        // orderData: { profileId, paymentMethod, note, orderProducts: [{productId, quantity}] }
        try {
            const response = await api.post('/order', orderData);
            return response; // ApiResponse<OrderResponse>
        } catch (error) {
            console.error('Create order failed:', error.message || error);
            throw error;
        }
    },

    // GET /order (Admin/Staff only)
    getAllOrdersForAdmin: async (pageIndex = 1, pageSize = 10, createdAt, paymentStatus, paymentMethod) => {
        const params = {
            pageIndex: pageIndex > 0 ? pageIndex : 1, // Example uses 1-based
            pageSize,
        };
        if (createdAt) params.createdAt = createdAt; // Format: dd-MM-yyyy
        if (paymentStatus !== undefined) params.paymentStatus = paymentStatus;
        if (paymentMethod !== undefined) params.paymentMethod = paymentMethod;

        try {
            const response = await api.get('/order', { params });
            return response; // ApiResponse<PageResponse<OrderResponse>>
        } catch (error) {
            console.error('Admin: Get all orders failed:', error.message || error);
            throw error;
        }
    },

    // GET /order/{orderId} (Admin/Staff only)
    getOrderByIdForAdmin: async (orderId) => {
        try {
            const response = await api.get(`/order/${orderId}`);
            return response; // ApiResponse<OrderResponse>
        } catch (error) {
            console.error(`Admin: Get order ${orderId} failed:`, error.message || error);
            throw error;
        }
    },

    // GET /order/my-orders (User)
    getMyOrders: async (pageIndex = 1, pageSize = 10) => {
        try {
            const response = await api.get('/order/my-orders', {
                // Backend OrderService uses 0-based pageIndex for PageRequest.of
                params: { pageIndex: pageIndex > 0 ? pageIndex : 1, pageSize } // Assuming API expects 1-based
            });
            return response; // ApiResponse<PageResponse<OrderResponse>>
        } catch (error) {
            console.error('Get my orders failed:', error.message || error);
            throw error;
        }
    },

    // GET /order/my-orders/{orderId} (User)
    getMyOrderById: async (orderId) => {
        try {
            const response = await api.get(`/order/my-orders/${orderId}`);
            return response; // ApiResponse<OrderResponse>
        } catch (error) {
            console.error(`Get my order ${orderId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /order/{orderId}/cancer (User) - Note: backend has 'cancer' typo
    cancelOrder: async (orderId, cancelData) => { // cancelData: { note }
        try {
            const response = await api.post(`/order/${orderId}/cancer`, cancelData);
            return response; // ApiResponse<String>
        } catch (error) {
            console.error(`Cancel order ${orderId} failed:`, error.message || error);
            throw error;
        }
    },

    // PATCH /order/{orderId} (Admin/Staff only)
    updateOrderStatusAsAdmin: async (orderId, statusData) => { // statusData: { status }
        try {
            const response = await api.patch(`/order/${orderId}`, statusData);
            return response; // ApiResponse<OrderResponse>
        } catch (error) {
            console.error(`Admin: Update order status for ${orderId} failed:`, error.message || error);
            throw error;
        }
    },
};
export default orderService;

/* ===== src\services\paymentService.js ===== */

/*
####################################################################
# paymentService.js
####################################################################
*/
// src/services/paymentService.js
import api from './api';

const paymentService = {
    // POST /payment/momo/{orderId}
    createMomoPayment: async (orderId) => {
        try {
            const response = await api.post(`/payment/momo/${orderId}`);
            return response; // ApiResponse<MomoResponse>
        } catch (error) {
            console.error(`Create Momo payment for order ${orderId} failed:`, error.message || error);
            throw error;
        }
    },

    // GET /payment/vnpay/{orderId}
    getVNPayPaymentUrl: async (orderId, bankCode = '') => {
        const params = {};
        if (bankCode) {
            params.bankCode = bankCode;
        }
        try {
            // This endpoint returns ApiResponse<Map<String, String>> where map is {"payUrl": "..."}
            const response = await api.get(`/payment/vnpay/${orderId}`, { params });
            return response;
        } catch (error) {
            console.error(`Get VNPay payment URL for order ${orderId} failed:`, error.message || error);
            throw error;
        }
    },
    // Note: /momo_return and /vnpay_return are callback URLs for the backend, not directly called by the mobile app.
};
export default paymentService;

/* ===== src\services\productService.js ===== */


/*
####################################################################
# productService.js
####################################################################
*/
// src/services/productService.js
import api from './api';

const productService = {
    // GET /product
    getAllProducts: async (filter = {}, pageIndex = 1, pageSize = 10) => {
        const params = {
            ...filter,
            pageIndex: pageIndex > 0 ? pageIndex : 1, // API example uses 1-based
            pageSize,
        };
        try {
            const response = await api.get('/product', { params });
            return response; // ApiResponse<PageResponse<ProductResponse>>
        } catch (error) {
            console.error('Get all products failed:', error.message || error);
            throw error;
        }
    },

    // GET /product/active
    getActiveProducts: async (filter = {}, pageIndex = 1, pageSize = 10) => {
        const params = {
            ...filter,
            pageIndex: pageIndex > 0 ? pageIndex : 1, // API example uses 1-based
            pageSize,
        };
        try {
            const response = await api.get('/product/active', { params });
            return response; // ApiResponse<PageResponse<ProductResponse>>
        } catch (error) {
            console.error('Get active products failed:', error.message || error);
            throw error;
        }
    },

    // GET /product/top-discount
    getTopDiscountProducts: async () => {
        try {
            const response = await api.get('/product/top-discount');
            return response; // ApiResponse<List<ProductResponse>>
        } catch (error) {
            console.error('Get top discount products failed:', error.message || error);
            throw error;
        }
    },

    // GET /product/top-rating
    getTopRatingProducts: async () => {
        try {
            const response = await api.get('/product/top-rating');
            return response; // ApiResponse<List<ProductResponse>>
        } catch (error) {
            console.error('Get top rating products failed:', error.message || error);
            throw error;
        }
    },

    // GET /product/{productId}
    getProductById: async (productId) => {
        try {
            const response = await api.get(`/product/${productId}`);
            return response; // ApiResponse<ProductResponse>
        } catch (error) {
            console.error(`Get product ${productId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /product (Admin/Staff only)
    createProduct: async (productData, thumbnailFile, imageFiles = []) => {
        // productData: ProductRequest DTO
        const formData = new FormData();
        formData.append('product', JSON.stringify(productData));
        formData.append('thumbnail', {
            uri: thumbnailFile.uri,
            name: thumbnailFile.fileName || `thumb-${Date.now()}`,
            type: thumbnailFile.mimeType || 'image/jpeg',
        });
        imageFiles.forEach((file, index) => {
            formData.append('images', {
                uri: file.uri,
                name: file.fileName || `image-${index}-${Date.now()}`,
                type: file.mimeType || 'image/jpeg',
            });
        });
        try {
            const response = await api.post('/product', formData);
            return response; // ApiResponse<ProductResponse>
        } catch (error) {
            console.error('Create product failed:', error.message || error);
            throw error;
        }
    },

    // PUT /product/{productId} (Admin/Staff only)
    updateProduct: async (productId, productData, thumbnailFile = null, imageFiles = []) => {
        const formData = new FormData();
        formData.append('product', JSON.stringify(productData));
        if (thumbnailFile) {
            formData.append('thumbnail', {
                uri: thumbnailFile.uri,
                name: thumbnailFile.fileName || `thumb-update-${Date.now()}`,
                type: thumbnailFile.mimeType || 'image/jpeg',
            });
        }
        if (imageFiles && imageFiles.length > 0) {
            imageFiles.forEach((file, index) => {
                formData.append('images', {
                    uri: file.uri,
                    name: file.fileName || `image-update-${index}-${Date.now()}`,
                    type: file.mimeType || 'image/jpeg',
                });
            });
        }
        try {
            const response = await api.put(`/product/${productId}`, formData);
            return response; // ApiResponse<ProductResponse>
        } catch (error) {
            console.error(`Update product ${productId} failed:`, error.message || error);
            throw error;
        }
    },

    // DELETE /product/{productId} (Admin/Staff only)
    deleteProduct: async (productId) => {
        try {
            const response = await api.delete(`/product/${productId}`);
            return response; // ApiResponse<ProductResponse> (or Void/message)
        } catch (error) {
            console.error(`Delete product ${productId} failed:`, error.message || error);
            throw error;
        }
    },

    // PUT /product/active/{id} (Admin/Staff only)
    updateProductStatus: async (productId, isActive) => {
        try {
            const response = await api.put(`/product/active/${productId}`, isActive, {
                headers: { 'Content-Type': 'application/json' } // Ensure correct content type for boolean body
            });
            return response; // ApiResponse<ProductResponse>
        } catch (error) {
            console.error(`Update product ${productId} status failed:`, error.message || error);
            throw error;
        }
    },

    // === Product Category Routes (within Product Service) ===
    // GET /product/category
    getProductCategories: async () => {
        try {
            const response = await api.get('/product/category');
            return response; // ApiResponse<List<CategoryResponse>>
        } catch (error) {
            console.error('Get product categories failed:', error.message || error);
            throw error;
        }
    },

    // === Product Rate Routes (within Product Service) ===
    // GET /product/rate
    getAllProductRates: async (pageIndex = 1, pageSize = 10) => {
        try {
            const response = await api.get('/product/rate', {
                params: { pageIndex: pageIndex > 0 ? pageIndex : 1, pageSize } // API example uses 1-based
            });
            return response; // ApiResponse<PageResponse<RateResponse>>
        } catch (error) {
            console.error('Get all product rates failed:', error.message || error);
            throw error;
        }
    },

    // GET /product/rate/{id}
    getRateById: async (rateId) => {
        try {
            const response = await api.get(`/product/rate/${rateId}`);
            return response; // ApiResponse<RateResponse>
        } catch (error) {
            console.error(`Get rate ${rateId} failed:`, error.message || error);
            throw error;
        }
    },

    // GET /product/rate/product/{productId}
    getRatesByProductId: async (productId, pageIndex = 1, pageSize = 10) => {
        try {
            const response = await api.get(`/product/rate/product/${productId}`, {
                params: { pageIndex: pageIndex > 0 ? pageIndex : 1, pageSize } // API example uses 1-based
            });
            return response; // ApiResponse<PageResponse<RateResponse>>
        } catch (error) {
            console.error(`Get rates for product ${productId} failed:`, error.message || error);
            throw error;
        }
    },

    // POST /product/rate
    createRate: async (rateData) => { // { productId, vote, comment }
        try {
            const response = await api.post('/product/rate', rateData);
            return response; // ApiResponse<RateResponse>
        } catch (error) {
            console.error('Create rate failed:', error.message || error);
            throw error;
        }
    },

    // DELETE /product/rate/{id}
    deleteRate: async (rateId) => {
        try {
            const response = await api.delete(`/product/rate/${rateId}`);
            return response; // ApiResponse<RateResponse> (or Void/message)
        } catch (error) {
            console.error(`Delete rate ${rateId} failed:`, error.message || error);
            throw error;
        }
    },
};
export default productService;

/* ===== src\services\profileService.js ===== */


/*
####################################################################
# profileService.js (Replaces userService.js)
####################################################################
*/
// src/services/profileService.js
import api from './api';
import identityService from './identityService'; // To update current user info locally

const profileService = {
    // GET /identity/users/info (lấy thông tin user hiện tại - đã có trong identityService, nhưng profileService có thể wrap nó)
    getMyInfo: async () => {
        try {
            const response = await api.get('/identity/users/info'); // Path from UserController
            if (response && response.result) {
                await identityService.setCurrentUser(response.result);
            }
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error('Get my info (profile context) failed:', error.message || error);
            throw error;
        }
    },

    // PUT /identity/users/info (cập nhật thông tin user hiện tại)
    updateMyInfo: async (userInfo) => { // userInfo: { email } based on UserUpdateInfoRequest
        try {
            const response = await api.put('/identity/users/info', userInfo); // Path from UserController
            if (response && response.result) {
                await identityService.setCurrentUser(response.result);
            }
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error('Update my info (profile context) failed:', error.message || error);
            throw error;
        }
    },

    // GET /identity/users/{userId} (Lấy thông tin user theo ID)
    getUserProfileById: async (userId) => {
        try {
            const response = await api.get(`/identity/users/${userId}`); // Path from UserController
            return response; // ApiResponse<UserResponse>
        } catch (error) {
            console.error(`Get user profile for ${userId} failed:`, error.message || error);
            throw error;
        }
    },

    // === Profile/Address specific endpoints from ProfileController ===
    // POST /profile
    createShippingProfile: async (profileData) => {
        // profileData: { fullName, phone, address, gender ("MALE" | "FEMALE") }
        try {
            const response = await api.post('/profile', profileData);
            return response; // ApiResponse<ProfileResponse>
        } catch (error) {
            console.error('Create shipping profile failed:', error.message || error);
            throw error;
        }
    },

    // GET /profile/my-profile
    getMyShippingProfiles: async (pageIndex = 1, pageSize = 10) => {
        try {
            // Backend ProfileService uses 1-based pageIndex
            const response = await api.get('/profile/my-profile', { params: { pageIndex, pageSize } });
            return response; // ApiResponse<PageResponse<ProfileResponse>>
        } catch (error) {
            console.error('Get my shipping profiles failed:', error.message || error);
            throw error;
        }
    },

    // PUT /profile/{profileId}
    updateShippingProfile: async (profileId, profileData) => {
        // profileData: { fullName, phone, address, gender }
        try {
            const response = await api.put(`/profile/${profileId}`, profileData);
            return response; // ApiResponse<ProfileResponse>
        } catch (error) {
            console.error(`Update shipping profile ${profileId} failed:`, error.message || error);
            throw error;
        }
    },

    // GET /profile/{profileId}
    getShippingProfileById: async (profileId) => {
        try {
            const response = await api.get(`/profile/${profileId}`);
            return response; // ApiResponse<ProfileResponse>
        } catch (error) {
            console.error(`Get shipping profile ${profileId} failed:`, error.message || error);
            throw error;
        }
    },

    // DELETE /profile/{profileId}
    deleteShippingProfile: async (profileId) => {
        try {
            const response = await api.delete(`/profile/${profileId}`);
            return response; // ApiResponse<String>
        } catch (error) {
            console.error(`Delete shipping profile ${profileId} failed:`, error.message || error);
            throw error;
        }
    },
};
export default profileService;


/* ===== BINARY FILES (PATHS ONLY) ===== */
/* Binary file: src\assets\fonts\SpaceMono-Regular.ttf */

/* ===== IGNORED FILES & DIRECTORIES ===== */
/* The following items were excluded based on ignore rules */

/* .gitignore patterns: */
/*   node_modules/ */
/*   .expo/ */
/*   dist/ */
/*   web-build/ */
/*   expo-env.d.ts */
/*   .idea/ */
/*   .vscode/ */
/*   .kotlin/ */
/*   *.orig.* */
/*   *.jks */
/*   *.p8 */
/*   *.p12 */
/*   *.key */
/*   *.mobileprovision */
/*   .metro-health-check* */
/*   npm-debug.* */
/*   yarn-debug.* */
/*   yarn-error.* */
/*   .DS_Store */
/*   *.pem */
/*   .env*.local */
/*   *.tsbuildinfo */
/*   app-example */

/* .watchignore patterns: */
/*   node_modules/ */
/*   .api/ */
/*   .git/ */
/*   .env */
/*   .gitignore */
/*   app.d.ts */
/*   babel.config.js */
/*   eslint.config.js */
/*   expo-env.d.ts */
/*   global.d.ts */
/*   metro.config.js */
/*   nativewind-env.d.ts */
/*   package-lock.json */
/*   postcss.config.js */
/*   README.md */
/*   tailwind.config.js */
/*   tsconfig.json */

/* Ignored items list: */
/* Ignored directories: */
/*   .codebase/ */
/*   .expo\types/ */
/*   .expo\web/ */
/*   .git\hooks/ */
/*   .git\info/ */
/*   .git\logs/ */
/*   .git\objects/ */
/*   .git\refs/ */
/*   .idea\inspectionProfiles/ */
/*   .vscode\.react/ */
/*   node_modules\.bin/ */
/*   node_modules\@0no-co/ */
/*   node_modules\@alloc/ */
/*   node_modules\@ampproject/ */
/*   node_modules\@babel/ */
/*   node_modules\@egjs/ */
/*   node_modules\@emnapi/ */
/*   node_modules\@eslint/ */
/*   node_modules\@eslint-community/ */
/*   node_modules\@expo/ */
/*   node_modules\@faker-js/ */
/*   node_modules\@humanfs/ */
/*   node_modules\@humanwhocodes/ */
/*   node_modules\@isaacs/ */
/*   node_modules\@istanbuljs/ */
/*   node_modules\@jest/ */
/*   node_modules\@jridgewell/ */
/*   node_modules\@modelcontextprotocol/ */
/*   node_modules\@napi-rs/ */
/*   node_modules\@nodelib/ */
/*   node_modules\@nolyfill/ */
/*   node_modules\@pkgjs/ */
/*   node_modules\@radix-ui/ */
/*   node_modules\@react-native/ */
/*   node_modules\@react-native-async-storage/ */
/*   node_modules\@react-navigation/ */
/*   node_modules\@rneui/ */
/*   node_modules\@rtsao/ */
/*   node_modules\@sinclair/ */
/*   node_modules\@sinonjs/ */
/*   node_modules\@tybys/ */
/*   node_modules\@types/ */
/*   node_modules\@typescript-eslint/ */
/*   node_modules\@unrs/ */
/*   node_modules\@urql/ */
/*   node_modules\@xmldom/ */
/*   node_modules\abort-controller/ */
/*   node_modules\accepts/ */
/*   node_modules\acorn/ */
/*   node_modules\acorn-jsx/ */
/*   node_modules\agent-base/ */
/*   node_modules\ajv/ */
/*   node_modules\ajv-formats/ */
/*   node_modules\anser/ */
/*   node_modules\ansi-escapes/ */
/*   node_modules\ansi-regex/ */
/*   node_modules\ansi-styles/ */
/*   node_modules\any-promise/ */
/*   node_modules\anymatch/ */
/*   node_modules\arg/ */
/*   node_modules\argparse/ */
/*   node_modules\array-buffer-byte-length/ */
/*   node_modules\array-includes/ */
/*   node_modules\array-timsort/ */
/*   node_modules\array.prototype.findlast/ */
/*   node_modules\array.prototype.findlastindex/ */
/*   node_modules\array.prototype.flat/ */
/*   node_modules\array.prototype.flatmap/ */
/*   node_modules\array.prototype.tosorted/ */
/*   node_modules\arraybuffer.prototype.slice/ */
/*   node_modules\asap/ */
/*   node_modules\async-function/ */
/*   node_modules\async-limiter/ */
/*   node_modules\asynckit/ */
/*   node_modules\autoprefixer/ */
/*   node_modules\available-typed-arrays/ */
/*   node_modules\axios/ */
/*   node_modules\babel-jest/ */
/*   node_modules\babel-plugin-istanbul/ */
/*   node_modules\babel-plugin-jest-hoist/ */
/*   node_modules\babel-plugin-polyfill-corejs2/ */
/*   node_modules\babel-plugin-polyfill-corejs3/ */
/*   node_modules\babel-plugin-polyfill-regenerator/ */
/*   node_modules\babel-plugin-react-native-web/ */
/*   node_modules\babel-plugin-syntax-hermes-parser/ */
/*   node_modules\babel-plugin-transform-flow-enums/ */
/*   node_modules\babel-preset-current-node-syntax/ */
/*   node_modules\babel-preset-expo/ */
/*   node_modules\babel-preset-jest/ */
/*   node_modules\balanced-match/ */
/*   node_modules\base64-js/ */
/*   node_modules\better-opn/ */
/*   node_modules\big-integer/ */
/*   node_modules\binary-extensions/ */
/*   node_modules\body-parser/ */
/*   node_modules\bplist-creator/ */
/*   node_modules\bplist-parser/ */
/*   node_modules\brace-expansion/ */
/*   node_modules\braces/ */
/*   node_modules\browserslist/ */
/*   node_modules\bser/ */
/*   node_modules\buffer/ */
/*   node_modules\buffer-from/ */
/*   node_modules\bytes/ */
/*   node_modules\call-bind/ */
/*   node_modules\call-bind-apply-helpers/ */
/*   node_modules\call-bound/ */
/*   node_modules\caller-callsite/ */
/*   node_modules\caller-path/ */
/*   node_modules\callsites/ */
/*   node_modules\camelcase/ */
/*   node_modules\camelcase-css/ */
/*   node_modules\caniuse-lite/ */
/*   node_modules\chalk/ */
/*   node_modules\chokidar/ */
/*   node_modules\chownr/ */
/*   node_modules\chrome-launcher/ */
/*   node_modules\chromium-edge-launcher/ */
/*   node_modules\ci-info/ */
/*   node_modules\cli-cursor/ */
/*   node_modules\cli-spinners/ */
/*   node_modules\client-only/ */
/*   node_modules\cliui/ */
/*   node_modules\clone/ */
/*   node_modules\color/ */
/*   node_modules\color-convert/ */
/*   node_modules\color-name/ */
/*   node_modules\color-string/ */
/*   node_modules\combined-stream/ */
/*   node_modules\commander/ */
/*   node_modules\comment-json/ */
/*   node_modules\compressible/ */
/*   node_modules\compression/ */
/*   node_modules\concat-map/ */
/*   node_modules\connect/ */
/*   node_modules\content-disposition/ */
/*   node_modules\content-type/ */
/*   node_modules\convert-source-map/ */
/*   node_modules\cookie/ */
/*   node_modules\cookie-signature/ */
/*   node_modules\core-js-compat/ */
/*   node_modules\core-util-is/ */
/*   node_modules\cors/ */
/*   node_modules\cosmiconfig/ */
/*   node_modules\cross-fetch/ */
/*   node_modules\cross-spawn/ */
/*   node_modules\crypto-random-string/ */
/*   node_modules\css-in-js-utils/ */
/*   node_modules\cssesc/ */
/*   node_modules\csstype/ */
/*   node_modules\data-view-buffer/ */
/*   node_modules\data-view-byte-length/ */
/*   node_modules\data-view-byte-offset/ */
/*   node_modules\debug/ */
/*   node_modules\decode-uri-component/ */
/*   node_modules\deep-extend/ */
/*   node_modules\deep-is/ */
/*   node_modules\deepmerge/ */
/*   node_modules\defaults/ */
/*   node_modules\define-data-property/ */
/*   node_modules\define-lazy-prop/ */
/*   node_modules\define-properties/ */
/*   node_modules\delayed-stream/ */
/*   node_modules\depd/ */
/*   node_modules\destroy/ */
/*   node_modules\detect-libc/ */
/*   node_modules\didyoumean/ */
/*   node_modules\dlv/ */
/*   node_modules\doctrine/ */
/*   node_modules\dotenv/ */
/*   node_modules\dotenv-expand/ */
/*   node_modules\dunder-proto/ */
/*   node_modules\eastasianwidth/ */
/*   node_modules\ee-first/ */
/*   node_modules\electron-to-chromium/ */
/*   node_modules\emoji-regex/ */
/*   node_modules\encodeurl/ */
/*   node_modules\env-editor/ */
/*   node_modules\error-ex/ */
/*   node_modules\error-stack-parser/ */
/*   node_modules\es-abstract/ */
/*   node_modules\es-define-property/ */
/*   node_modules\es-errors/ */
/*   node_modules\es-iterator-helpers/ */
/*   node_modules\es-object-atoms/ */
/*   node_modules\es-set-tostringtag/ */
/*   node_modules\es-shim-unscopables/ */
/*   node_modules\es-to-primitive/ */
/*   node_modules\escalade/ */
/*   node_modules\escape-html/ */
/*   node_modules\escape-string-regexp/ */
/*   node_modules\eslint/ */
/*   node_modules\eslint-config-expo/ */
/*   node_modules\eslint-import-resolver-node/ */
/*   node_modules\eslint-import-resolver-typescript/ */
/*   node_modules\eslint-module-utils/ */
/*   node_modules\eslint-plugin-expo/ */
/*   node_modules\eslint-plugin-import/ */
/*   node_modules\eslint-plugin-react/ */
/*   node_modules\eslint-plugin-react-hooks/ */
/*   node_modules\eslint-scope/ */
/*   node_modules\eslint-visitor-keys/ */
/*   node_modules\espree/ */
/*   node_modules\esprima/ */
/*   node_modules\esquery/ */
/*   node_modules\esrecurse/ */
/*   node_modules\estraverse/ */
/*   node_modules\esutils/ */
/*   node_modules\etag/ */
/*   node_modules\event-target-shim/ */
/*   node_modules\eventsource/ */
/*   node_modules\eventsource-parser/ */
/*   node_modules\exec-async/ */
/*   node_modules\expo/ */
/*   node_modules\expo-asset/ */
/*   node_modules\expo-blur/ */
/*   node_modules\expo-constants/ */
/*   node_modules\expo-file-system/ */
/*   node_modules\expo-font/ */
/*   node_modules\expo-haptics/ */
/*   node_modules\expo-image/ */
/*   node_modules\expo-keep-awake/ */
/*   node_modules\expo-linking/ */
/*   node_modules\expo-modules-autolinking/ */
/*   node_modules\expo-modules-core/ */
/*   node_modules\expo-router/ */
/*   node_modules\expo-splash-screen/ */
/*   node_modules\expo-status-bar/ */
/*   node_modules\expo-symbols/ */
/*   node_modules\expo-system-ui/ */
/*   node_modules\expo-web-browser/ */
/*   node_modules\exponential-backoff/ */
/*   node_modules\express/ */
/*   node_modules\express-rate-limit/ */
/*   node_modules\fast-deep-equal/ */
/*   node_modules\fast-glob/ */
/*   node_modules\fast-json-stable-stringify/ */
/*   node_modules\fast-levenshtein/ */
/*   node_modules\fast-uri/ */
/*   node_modules\fastq/ */
/*   node_modules\fb-watchman/ */
/*   node_modules\fbjs/ */
/*   node_modules\fbjs-css-vars/ */
/*   node_modules\fdir/ */
/*   node_modules\file-entry-cache/ */
/*   node_modules\fill-range/ */
/*   node_modules\filter-obj/ */
/*   node_modules\finalhandler/ */
/*   node_modules\find-up/ */
/*   node_modules\flat-cache/ */
/*   node_modules\flatted/ */
/*   node_modules\flow-enums-runtime/ */
/*   node_modules\follow-redirects/ */
/*   node_modules\fontfaceobserver/ */
/*   node_modules\for-each/ */
/*   node_modules\foreground-child/ */
/*   node_modules\form-data/ */
/*   node_modules\forwarded/ */
/*   node_modules\fraction.js/ */
/*   node_modules\freeport-async/ */
/*   node_modules\fresh/ */
/*   node_modules\fs.realpath/ */
/*   node_modules\function-bind/ */
/*   node_modules\function.prototype.name/ */
/*   node_modules\functions-have-names/ */
/*   node_modules\gensync/ */
/*   node_modules\get-caller-file/ */
/*   node_modules\get-intrinsic/ */
/*   node_modules\get-package-type/ */
/*   node_modules\get-proto/ */
/*   node_modules\get-symbol-description/ */
/*   node_modules\get-tsconfig/ */
/*   node_modules\getenv/ */
/*   node_modules\glob/ */
/*   node_modules\glob-parent/ */
/*   node_modules\globals/ */
/*   node_modules\globalthis/ */
/*   node_modules\gopd/ */
/*   node_modules\graceful-fs/ */
/*   node_modules\graphemer/ */
/*   node_modules\has-bigints/ */
/*   node_modules\has-flag/ */
/*   node_modules\has-own-prop/ */
/*   node_modules\has-property-descriptors/ */
/*   node_modules\has-proto/ */
/*   node_modules\has-symbols/ */
/*   node_modules\has-tostringtag/ */
/*   node_modules\hasown/ */
/*   node_modules\hermes-estree/ */
/*   node_modules\hermes-parser/ */
/*   node_modules\hoist-non-react-statics/ */
/*   node_modules\hosted-git-info/ */
/*   node_modules\http-errors/ */
/*   node_modules\https-proxy-agent/ */
/*   node_modules\hyphenate-style-name/ */
/*   node_modules\iconv-lite/ */
/*   node_modules\ieee754/ */
/*   node_modules\ignore/ */
/*   node_modules\image-size/ */
/*   node_modules\import-fresh/ */
/*   node_modules\imurmurhash/ */
/*   node_modules\inflight/ */
/*   node_modules\inherits/ */
/*   node_modules\ini/ */
/*   node_modules\inline-style-prefixer/ */
/*   node_modules\internal-slot/ */
/*   node_modules\invariant/ */
/*   node_modules\ipaddr.js/ */
/*   node_modules\is-array-buffer/ */
/*   node_modules\is-arrayish/ */
/*   node_modules\is-async-function/ */
/*   node_modules\is-bigint/ */
/*   node_modules\is-binary-path/ */
/*   node_modules\is-boolean-object/ */
/*   node_modules\is-bun-module/ */
/*   node_modules\is-callable/ */
/*   node_modules\is-core-module/ */
/*   node_modules\is-data-view/ */
/*   node_modules\is-date-object/ */
/*   node_modules\is-directory/ */
/*   node_modules\is-docker/ */
/*   node_modules\is-extglob/ */
/*   node_modules\is-finalizationregistry/ */
/*   node_modules\is-fullwidth-code-point/ */
/*   node_modules\is-generator-function/ */
/*   node_modules\is-glob/ */
/*   node_modules\is-map/ */
/*   node_modules\is-number/ */
/*   node_modules\is-number-object/ */
/*   node_modules\is-plain-obj/ */
/*   node_modules\is-promise/ */
/*   node_modules\is-regex/ */
/*   node_modules\is-set/ */
/*   node_modules\is-shared-array-buffer/ */
/*   node_modules\is-string/ */
/*   node_modules\is-symbol/ */
/*   node_modules\is-typed-array/ */
/*   node_modules\is-weakmap/ */
/*   node_modules\is-weakref/ */
/*   node_modules\is-weakset/ */
/*   node_modules\is-wsl/ */
/*   node_modules\isarray/ */
/*   node_modules\isexe/ */
/*   node_modules\istanbul-lib-coverage/ */
/*   node_modules\istanbul-lib-instrument/ */
/*   node_modules\iterator.prototype/ */
/*   node_modules\jackspeak/ */
/*   node_modules\jest-environment-node/ */
/*   node_modules\jest-get-type/ */
/*   node_modules\jest-haste-map/ */
/*   node_modules\jest-message-util/ */
/*   node_modules\jest-mock/ */
/*   node_modules\jest-regex-util/ */
/*   node_modules\jest-util/ */
/*   node_modules\jest-validate/ */
/*   node_modules\jest-worker/ */
/*   node_modules\jimp-compact/ */
/*   node_modules\jiti/ */
/*   node_modules\js-tokens/ */
/*   node_modules\js-yaml/ */
/*   node_modules\jsc-safe-url/ */
/*   node_modules\jsesc/ */
/*   node_modules\json-buffer/ */
/*   node_modules\json-parse-better-errors/ */
/*   node_modules\json-schema-traverse/ */
/*   node_modules\json-stable-stringify-without-jsonify/ */
/*   node_modules\json5/ */
/*   node_modules\jsx-ast-utils/ */
/*   node_modules\keyv/ */
/*   node_modules\kleur/ */
/*   node_modules\lan-network/ */
/*   node_modules\leven/ */
/*   node_modules\levn/ */
/*   node_modules\lighthouse-logger/ */
/*   node_modules\lightningcss/ */
/*   node_modules\lightningcss-win32-x64-msvc/ */
/*   node_modules\lilconfig/ */
/*   node_modules\lines-and-columns/ */
/*   node_modules\locate-path/ */
/*   node_modules\lodash/ */
/*   node_modules\lodash.debounce/ */
/*   node_modules\lodash.merge/ */
/*   node_modules\lodash.throttle/ */
/*   node_modules\log-symbols/ */
/*   node_modules\loose-envify/ */
/*   node_modules\lru-cache/ */
/*   node_modules\makeerror/ */
/*   node_modules\marky/ */
/*   node_modules\math-intrinsics/ */
/*   node_modules\media-typer/ */
/*   node_modules\memoize-one/ */
/*   node_modules\merge-descriptors/ */
/*   node_modules\merge-options/ */
/*   node_modules\merge-stream/ */
/*   node_modules\merge2/ */
/*   node_modules\metro/ */
/*   node_modules\metro-babel-transformer/ */
/*   node_modules\metro-cache/ */
/*   node_modules\metro-cache-key/ */
/*   node_modules\metro-config/ */
/*   node_modules\metro-core/ */
/*   node_modules\metro-file-map/ */
/*   node_modules\metro-minify-terser/ */
/*   node_modules\metro-resolver/ */
/*   node_modules\metro-runtime/ */
/*   node_modules\metro-source-map/ */
/*   node_modules\metro-symbolicate/ */
/*   node_modules\metro-transform-plugins/ */
/*   node_modules\metro-transform-worker/ */
/*   node_modules\micromatch/ */
/*   node_modules\mime/ */
/*   node_modules\mime-db/ */
/*   node_modules\mime-types/ */
/*   node_modules\mimic-fn/ */
/*   node_modules\minimatch/ */
/*   node_modules\minimist/ */
/*   node_modules\minipass/ */
/*   node_modules\minizlib/ */
/*   node_modules\mkdirp/ */
/*   node_modules\ms/ */
/*   node_modules\mz/ */
/*   node_modules\nanoid/ */
/*   node_modules\napi-postinstall/ */
/*   node_modules\nativewind/ */
/*   node_modules\natural-compare/ */
/*   node_modules\negotiator/ */
/*   node_modules\nested-error-stacks/ */
/*   node_modules\node-fetch/ */
/*   node_modules\node-forge/ */
/*   node_modules\node-int64/ */
/*   node_modules\node-releases/ */
/*   node_modules\normalize-path/ */
/*   node_modules\normalize-range/ */
/*   node_modules\npm-package-arg/ */
/*   node_modules\nullthrows/ */
/*   node_modules\ob1/ */
/*   node_modules\object-assign/ */
/*   node_modules\object-hash/ */
/*   node_modules\object-inspect/ */
/*   node_modules\object-keys/ */
/*   node_modules\object.assign/ */
/*   node_modules\object.entries/ */
/*   node_modules\object.fromentries/ */
/*   node_modules\object.groupby/ */
/*   node_modules\object.values/ */
/*   node_modules\on-finished/ */
/*   node_modules\on-headers/ */
/*   node_modules\once/ */
/*   node_modules\onetime/ */
/*   node_modules\open/ */
/*   node_modules\optionator/ */
/*   node_modules\ora/ */
/*   node_modules\own-keys/ */
/*   node_modules\p-limit/ */
/*   node_modules\p-locate/ */
/*   node_modules\p-try/ */
/*   node_modules\package-json-from-dist/ */
/*   node_modules\parent-module/ */
/*   node_modules\parse-json/ */
/*   node_modules\parse-png/ */
/*   node_modules\parseurl/ */
/*   node_modules\path-exists/ */
/*   node_modules\path-is-absolute/ */
/*   node_modules\path-key/ */
/*   node_modules\path-parse/ */
/*   node_modules\path-scurry/ */
/*   node_modules\path-to-regexp/ */
/*   node_modules\picocolors/ */
/*   node_modules\picomatch/ */
/*   node_modules\pify/ */
/*   node_modules\pirates/ */
/*   node_modules\pkce-challenge/ */
/*   node_modules\plist/ */
/*   node_modules\pngjs/ */
/*   node_modules\possible-typed-array-names/ */
/*   node_modules\postcss/ */
/*   node_modules\postcss-import/ */
/*   node_modules\postcss-js/ */
/*   node_modules\postcss-load-config/ */
/*   node_modules\postcss-nested/ */
/*   node_modules\postcss-selector-parser/ */
/*   node_modules\postcss-value-parser/ */
/*   node_modules\prelude-ls/ */
/*   node_modules\pretty-bytes/ */
/*   node_modules\pretty-format/ */
/*   node_modules\proc-log/ */
/*   node_modules\progress/ */
/*   node_modules\promise/ */
/*   node_modules\prompts/ */
/*   node_modules\prop-types/ */
/*   node_modules\proxy-addr/ */
/*   node_modules\proxy-from-env/ */
/*   node_modules\punycode/ */
/*   node_modules\qrcode-terminal/ */
/*   node_modules\qs/ */
/*   node_modules\query-string/ */
/*   node_modules\queue/ */
/*   node_modules\queue-microtask/ */
/*   node_modules\range-parser/ */
/*   node_modules\raw-body/ */
/*   node_modules\rc/ */
/*   node_modules\react/ */
/*   node_modules\react-devtools-core/ */
/*   node_modules\react-dom/ */
/*   node_modules\react-fast-compare/ */
/*   node_modules\react-freeze/ */
/*   node_modules\react-is/ */
/*   node_modules\react-native/ */
/*   node_modules\react-native-css-interop/ */
/*   node_modules\react-native-edge-to-edge/ */
/*   node_modules\react-native-gesture-handler/ */
/*   node_modules\react-native-is-edge-to-edge/ */
/*   node_modules\react-native-ratings/ */
/*   node_modules\react-native-reanimated/ */
/*   node_modules\react-native-safe-area-context/ */
/*   node_modules\react-native-screens/ */
/*   node_modules\react-native-size-matters/ */
/*   node_modules\react-native-web/ */
/*   node_modules\react-native-webview/ */
/*   node_modules\react-refresh/ */
/*   node_modules\read-cache/ */
/*   node_modules\readdirp/ */
/*   node_modules\reflect.getprototypeof/ */
/*   node_modules\regenerate/ */
/*   node_modules\regenerate-unicode-properties/ */
/*   node_modules\regenerator-runtime/ */
/*   node_modules\regexp.prototype.flags/ */
/*   node_modules\regexpu-core/ */
/*   node_modules\regjsgen/ */
/*   node_modules\regjsparser/ */
/*   node_modules\repeat-string/ */
/*   node_modules\require-directory/ */
/*   node_modules\require-from-string/ */
/*   node_modules\requireg/ */
/*   node_modules\resolve/ */
/*   node_modules\resolve-from/ */
/*   node_modules\resolve-pkg-maps/ */
/*   node_modules\resolve-workspace-root/ */
/*   node_modules\resolve.exports/ */
/*   node_modules\restore-cursor/ */
/*   node_modules\reusify/ */
/*   node_modules\rimraf/ */
/*   node_modules\router/ */
/*   node_modules\run-parallel/ */
/*   node_modules\safe-array-concat/ */
/*   node_modules\safe-buffer/ */
/*   node_modules\safe-push-apply/ */
/*   node_modules\safe-regex-test/ */
/*   node_modules\safer-buffer/ */
/*   node_modules\sax/ */
/*   node_modules\scheduler/ */
/*   node_modules\schema-utils/ */
/*   node_modules\semver/ */
/*   node_modules\send/ */
/*   node_modules\serialize-error/ */
/*   node_modules\serve-static/ */
/*   node_modules\server-only/ */
/*   node_modules\set-function-length/ */
/*   node_modules\set-function-name/ */
/*   node_modules\set-proto/ */
/*   node_modules\setimmediate/ */
/*   node_modules\setprototypeof/ */
/*   node_modules\sf-symbols-typescript/ */
/*   node_modules\shallowequal/ */
/*   node_modules\shebang-command/ */
/*   node_modules\shebang-regex/ */
/*   node_modules\shell-quote/ */
/*   node_modules\side-channel/ */
/*   node_modules\side-channel-list/ */
/*   node_modules\side-channel-map/ */
/*   node_modules\side-channel-weakmap/ */
/*   node_modules\signal-exit/ */
/*   node_modules\simple-plist/ */
/*   node_modules\simple-swizzle/ */
/*   node_modules\sisteransi/ */
/*   node_modules\slash/ */
/*   node_modules\slugify/ */
/*   node_modules\source-map/ */
/*   node_modules\source-map-js/ */
/*   node_modules\source-map-support/ */
/*   node_modules\split-on-first/ */
/*   node_modules\sprintf-js/ */
/*   node_modules\stable-hash/ */
/*   node_modules\stack-utils/ */
/*   node_modules\stackframe/ */
/*   node_modules\stacktrace-parser/ */
/*   node_modules\statuses/ */
/*   node_modules\stream-buffers/ */
/*   node_modules\strict-uri-encode/ */
/*   node_modules\string-width/ */
/*   node_modules\string-width-cjs/ */
/*   node_modules\string.prototype.matchall/ */
/*   node_modules\string.prototype.repeat/ */
/*   node_modules\string.prototype.trim/ */
/*   node_modules\string.prototype.trimend/ */
/*   node_modules\string.prototype.trimstart/ */
/*   node_modules\strip-ansi/ */
/*   node_modules\strip-ansi-cjs/ */
/*   node_modules\strip-bom/ */
/*   node_modules\strip-json-comments/ */
/*   node_modules\structured-headers/ */
/*   node_modules\styleq/ */
/*   node_modules\sucrase/ */
/*   node_modules\supports-color/ */
/*   node_modules\supports-hyperlinks/ */
/*   node_modules\supports-preserve-symlinks-flag/ */
/*   node_modules\tailwindcss/ */
/*   node_modules\tar/ */
/*   node_modules\temp-dir/ */
/*   node_modules\terminal-link/ */
/*   node_modules\terser/ */
/*   node_modules\test-exclude/ */
/*   node_modules\thenify/ */
/*   node_modules\thenify-all/ */
/*   node_modules\throat/ */
/*   node_modules\tinyglobby/ */
/*   node_modules\tmpl/ */
/*   node_modules\to-regex-range/ */
/*   node_modules\toidentifier/ */
/*   node_modules\tr46/ */
/*   node_modules\ts-api-utils/ */
/*   node_modules\ts-interface-checker/ */
/*   node_modules\tsconfig-paths/ */
/*   node_modules\type-check/ */
/*   node_modules\type-detect/ */
/*   node_modules\type-fest/ */
/*   node_modules\type-is/ */
/*   node_modules\typed-array-buffer/ */
/*   node_modules\typed-array-byte-length/ */
/*   node_modules\typed-array-byte-offset/ */
/*   node_modules\typed-array-length/ */
/*   node_modules\typescript/ */
/*   node_modules\ua-parser-js/ */
/*   node_modules\unbox-primitive/ */
/*   node_modules\undici/ */
/*   node_modules\undici-types/ */
/*   node_modules\unicode-canonical-property-names-ecmascript/ */
/*   node_modules\unicode-match-property-ecmascript/ */
/*   node_modules\unicode-match-property-value-ecmascript/ */
/*   node_modules\unicode-property-aliases-ecmascript/ */
/*   node_modules\unique-string/ */
/*   node_modules\unpipe/ */
/*   node_modules\unrs-resolver/ */
/*   node_modules\update-browserslist-db/ */
/*   node_modules\uri-js/ */
/*   node_modules\use-latest-callback/ */
/*   node_modules\use-sync-external-store/ */
/*   node_modules\util-deprecate/ */
/*   node_modules\utils-merge/ */
/*   node_modules\uuid/ */
/*   node_modules\validate-npm-package-name/ */
/*   node_modules\vary/ */
/*   node_modules\vlq/ */
/*   node_modules\walker/ */
/*   node_modules\warn-once/ */
/*   node_modules\wcwidth/ */
/*   node_modules\webidl-conversions/ */
/*   node_modules\whatwg-fetch/ */
/*   node_modules\whatwg-url/ */
/*   node_modules\whatwg-url-without-unicode/ */
/*   node_modules\which/ */
/*   node_modules\which-boxed-primitive/ */
/*   node_modules\which-builtin-type/ */
/*   node_modules\which-collection/ */
/*   node_modules\which-typed-array/ */
/*   node_modules\wonka/ */
/*   node_modules\word-wrap/ */
/*   node_modules\wrap-ansi/ */
/*   node_modules\wrap-ansi-cjs/ */
/*   node_modules\wrappy/ */
/*   node_modules\write-file-atomic/ */
/*   node_modules\ws/ */
/*   node_modules\xcode/ */
/*   node_modules\xml2js/ */
/*   node_modules\xmlbuilder/ */
/*   node_modules\y18n/ */
/*   node_modules\yallist/ */
/*   node_modules\yaml/ */
/*   node_modules\yargs/ */
/*   node_modules\yargs-parser/ */
/*   node_modules\yocto-queue/ */
/*   node_modules\zod/ */
/*   node_modules\zod-to-json-schema/ */

/* Ignored files: */
/*   .api\api_endpoints.txt */
/*   .api\axios_response_example.txt */
/*   .api\codebase_backend_api.txt */
/*   .env */
/*   .expo\README.md */
/*   .expo\devices.json */
/*   .git\COMMIT_EDITMSG */
/*   .git\HEAD */
/*   .git\config */
/*   .git\description */
/*   .git\index */
/*   .gitignore */
/*   .idea\.gitignore */
/*   .idea\book_store_mobile.iml */
/*   .idea\modules.xml */
/*   .idea\vcs.xml */
/*   .idea\workspace.xml */
/*   .vscode\settings.json */
/*   README.md */
/*   app.d.ts */
/*   babel.config.js */
/*   eslint.config.js */
/*   expo-env.d.ts */
/*   global.d.ts */
/*   metro.config.js */
/*   nativewind-env.d.ts */
/*   node_modules\.package-lock.json */
/*   package-lock.json */
/*   postcss.config.js */
/*   tailwind.config.js */
/*   tsconfig.json */
